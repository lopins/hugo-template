<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Gateway on Huabing Blog</title><link>https://lopins.github.io/hugo-template/tags/api-gateway/</link><description>Recent content in API Gateway on Huabing Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 01 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://lopins.github.io/hugo-template/tags/api-gateway/index.xml" rel="self" type="application/rss+xml"/><item><title>KubeCon 上海分享: Envoy Gateway - The API Gateway in the Cloud Native Era</title><link>https://lopins.github.io/hugo-template/post/2023-11-01-kubecon-shanghai-2023-envoy-gateway-the-api-gateway-in-the-cloud-native-era/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-11-01-kubecon-shanghai-2023-envoy-gateway-the-api-gateway-in-the-cloud-native-era/</guid><description>&lt;p>EnvoyProx 是云原生时代的代理之一，也是CNCF下的毕业项目之一。Envoy Gateway 是由 EnvoyProxy 的创始人 Matt Klein 发起的 API 网关项目。由我所在公司（Tetrate.io）以及 Emissary、Contour 等其他 API 网关项目共同维护。Envoy Gateway 作为 EnvoyProxy 发起的官方 API 网关项目，是基于 EnvoyProxy 的南北向 API 网关的官方实现，大大降低了使用 EnvoyProxy 的门槛，使用户不必重复“造轮子”来构建 EnvoyProxy 控制平面，并处理难以理解的复杂 xDS 协议和 EnvoyProxy 的配置。Envoy Gateway 使用 Kubernetes Gateway API 作为其配置，可以轻松启动管理南北向流量。Envoy Gateway 在多个社区和积极贡献者的推动下迅速发展。本主题将介绍为什么 Envoy Gateway 是云原生时代的 API 网关。&lt;/p></description></item><item><title>Which One is the Right Choice for the Ingress Gateway of Your Service Mesh?</title><link>https://lopins.github.io/hugo-template/post/2019-04-16-how-to-choose-ingress-for-service-mesh-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-04-16-how-to-choose-ingress-for-service-mesh-english/</guid><description>&lt;p>By default, in a Kubernetes cluster with the Istio service mesh enabled, services can only be accessed inside the cluster. However, some of the services may need to be exposed to external networks as well. Kubernetes and Istio provide a variety of means to get external traffic into your cluster including NodePort, LoadBalancer, Kubernetes Ingress and Istio Gateway. With all these options, which one should be the right choice for your service mesh running in production?&lt;/p></description></item><item><title>如何为服务网格选择入口网关？</title><link>https://lopins.github.io/hugo-template/post/2019-03-29-how-to-choose-ingress-for-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-03-29-how-to-choose-ingress-for-service-mesh/</guid><description>&lt;p>在启用了Istio服务网格的Kubernetes集群中，缺省情况下只能在集群内部访问网格中的服务，要如何才能从外部网络访问这些服务呢？ Kubernetes和Istio提供了NodePort，LoadBalancer，Kubernetes Ingress，Istio Gateway等多种外部流量入口的方式，面对这么多种方式，我们在产品部署中应该如何选择？&lt;/p></description></item><item><title>Service Mesh 和 API Gateway的关系探讨（译文）</title><link>https://lopins.github.io/hugo-template/2018/04/11/service-mesh-vs-api-gateway/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2018/04/11/service-mesh-vs-api-gateway/</guid><description>&lt;h2 id="service-mesh-vs-api-gateway">Service Mesh vs API Gateway&lt;/h2>
&lt;p>在&lt;a href="https://medium.com/microservices-in-practice/service-mesh-for-microservices-2953109a3c9a">前一篇关于Service Mesh的文章&lt;/a>中,我提到了几个关于Service Mesh和API Gateway之间关系的问题，在本篇文章中，我打算就Service Mesh和API Gateway的用途进行进一步讨论。&lt;/p></description></item><item><title>LFN ONAP Beijing Release Developer Forum: MSB to Support Carrier Grade ONAP Microservice Architecture with Service Mesh</title><link>https://lopins.github.io/hugo-template/post/2017-11-11-onap-msb-to-support-carrier-grade-onap-microservice-architecture-with-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2017-11-11-onap-msb-to-support-carrier-grade-onap-microservice-architecture-with-service-mesh/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this session, I&amp;rsquo;ll talk about the MSB Plan for R2 and Beyond. I&amp;rsquo;ll also discuss the OMSA(ONAP Microservice Architecture): the vision of ONAP Microservice Architecture to support Carrier-Grade requirements of ONAP Microservices, which includes Service Orchestration, Service Discovery, Inter-service Communication, Service Governance and Service Monitoring and External API Gateway.&lt;/p>
&lt;p>ONAP Architecture Principle: ONAP modules should be designed as microservices: service-based with clear, concise function addressed by each service with loose coupling.&lt;/p></description></item><item><title>LFN ONAP Developer Event: Microservice Bus Tutorial</title><link>https://lopins.github.io/hugo-template/post/2017-09-25-onap-microservice-bus-tutorial-/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2017-09-25-onap-microservice-bus-tutorial-/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Microservices Bus(MSB) provide a reliable, resilient and scalable communication and governance infrastructure to support Microservice Architecture including including service registration/discovery, external API gateway, internal API gateway, client SDK. It&amp;rsquo;s a pluggable architecture so it can integrate with auth service provider to provide centralized Authentication &amp;amp; Authorization. MSB also provides a service portal to manage the REST APIs.&lt;/p>
&lt;p>MSB doesn’t depend on a specific environment. It can work in bare metal, virtual machine or containerized environment.&lt;/p></description></item><item><title>ONS ONAP Minisummit: Microservice Powered Orchestration Architecture</title><link>https://lopins.github.io/hugo-template/post/2017-04-14-onap-microservice-powered-orchestration-architecture/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2017-04-14-onap-microservice-powered-orchestration-architecture/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this session, I&amp;rsquo;ll talk about the MSB(Microservice BUS) project we have been using in OPEN-O as the fabric for Microservice communications.&lt;/p>
&lt;p>First, I will start with why we choose Microservice Architecture in OPEN-O.&lt;/p>
&lt;p>Then, I’d like to talk about the challenges we were facing when we turn to the microservice approach.&lt;/p>
&lt;p>Finally, How we address these challenges in OPEN-O with the help of Microservice BUS
And what’s the potential benefit MSB could bring to ONAP.&lt;/p></description></item><item><title>LFN ONAP Developer Event: MSB Technical Deep Dive and ONAP Use Cases</title><link>https://lopins.github.io/hugo-template/post/2017-04-02-onap-msb-deep-dive/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2017-04-02-onap-msb-deep-dive/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this session, I&amp;rsquo;ll talk about the MSB(Microservice BUS) project we have been using in OPEN-O as the fabric for Microservice communications.&lt;/p>
&lt;p>First, I will start with why we choose Microservice Architecture in OPEN-O.&lt;/p>
&lt;p>Then, I’d like to talk about the challenges we were facing when we turn to the microservice approach.&lt;/p>
&lt;p>Finally, How we address these challenges in OPEN-O with the help of Microservice BUS
And what’s the potential benefit MSB could bring to ONAP.&lt;/p></description></item></channel></rss>