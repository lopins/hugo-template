<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EBPF on Huabing Blog</title><link>https://lopins.github.io/hugo-template/tags/ebpf/</link><description>Recent content in EBPF on Huabing Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 18 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://lopins.github.io/hugo-template/tags/ebpf/index.xml" rel="self" type="application/rss+xml"/><item><title>译文：服务网格将使用 eBPF ？是的，但 Envoy 代理将继续存在</title><link>https://lopins.github.io/hugo-template/post/2021-12-19-ebpf-for-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-12-19-ebpf-for-service-mesh/</guid><description>&lt;p>译者按：这篇博客非常清晰地阐述了目前很热的 eBPF 和 Service Mesh 的关系，并分别介绍 Envoy 在几种不同的数据平面架构模型中的位置，以及这几种架构模型各自的优势和权衡。最近我和同事以及社区的同学就引入 eBPF 之后 Service Mesh 的架构演进做了一些讨论，结论和 Solo 的这篇博客中的某些观点类似。作为 Linux 内核的一种扩展能力，eBPF 并不会替换 Envoy 的七层代理能力，而是作为 Service Mesh 数据面的一个增强技术。&lt;/p></description></item></channel></rss>