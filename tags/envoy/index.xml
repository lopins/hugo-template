<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Envoy on Huabing Blog</title><link>https://lopins.github.io/hugo-template/tags/envoy/</link><description>Recent content in Envoy on Huabing Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 31 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lopins.github.io/hugo-template/tags/envoy/index.xml" rel="self" type="application/rss+xml"/><item><title>Beyond Gateway API: Introducing Envoy Gateway's Gateway API Extensions</title><link>https://lopins.github.io/hugo-template/post/2024-09-22-introducing-envoy-gateways-gateway-api-extensions-en/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2024-09-22-introducing-envoy-gateways-gateway-api-extensions-en/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>This article is a summary of my talk,&amp;quot;&lt;a href="https://kccncossaidevchn2024.sched.com/event/1eYcX/gateway-api-and-beyond-introducing-envoy-gateways-gateway-api-extensions-jie-api-daeptao-envoyjie-zha-jie-api-huabing-zhao-tetrate">Gateway API and Beyond: Introducing Envoy Gateway&amp;rsquo;s Gateway API Extensions¹&lt;/a>&amp;quot;, presented at KubeCon China in Hong Kong, August 2024.&lt;/p>
&lt;/blockquote>


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/qH2byF7SDO8?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div>

&lt;p>As the official Gateway Controller for the Envoy, &lt;a href="https://github.com/envoyproxy/gateway">Envoy Gateway²&lt;/a> provides full support for all the features of the &lt;a href="https://gateway-api.sigs.k8s.io">Kubernetes Gateway API³&lt;/a>.In addition, Envoy Gateway extends the Gateway API by introducing a range of enhancements for traffic management, security features, and custom extensions that go beyond the standard API. In this post, we’ll dive into these Envoy Gateway extensions and explore their use cases.&lt;/p></description></item><item><title>超越 Gateway API：深入探索 Envoy Gateway 的扩展功能</title><link>https://lopins.github.io/hugo-template/post/2024-08-31-introducing-envoy-gateways-gateway-api-extensions/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2024-08-31-introducing-envoy-gateways-gateway-api-extensions/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>本文是我在 2024 年 8 月于香港举行的 Kubecon China 上的技术分享：&lt;a href="https://kccncossaidevchn2024.sched.com/event/1eYcX/gateway-api-and-beyond-introducing-envoy-gateways-gateway-api-extensions-jie-api-daeptao-envoyjie-zha-jie-api-huabing-zhao-tetrate">Gateway API and Beyond: Introducing Envoy Gateway&amp;rsquo;s Gateway API Extensions¹&lt;/a> 的内容总结。&lt;/p>
&lt;/blockquote>


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/qH2byF7SDO8?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div>

&lt;p>作为 Envoy 社区推出的 Ingress Gateway 实现，&lt;a href="https://github.com/envoyproxy/gateway">Envoy Gateway²&lt;/a> 全面支持了 &lt;a href="https://gateway-api.sigs.k8s.io">Kubernetes Gateway API³&lt;/a> 的所有能力。除此之外，基于 Gateway API 的扩展机制，Envoy Gateway 还提供了丰富的流量管理、安全性、自定义扩展等 Gateway API 中并不包含的增强功能。本文将介绍 Envoy Gateway 的 Gateway API 扩展功能，并深入探讨这些功能的应用场景。&lt;/p></description></item><item><title>Highlights of Envoy Gateway v1.1.0: What’s New and Improved</title><link>https://lopins.github.io/hugo-template/post/2024-06-16-eg-1.1.0-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2024-06-16-eg-1.1.0-english/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>Envoy Gateway (EG) released its latest version, 1.1.0, on July 22. This update marks the first feature release since the 1.0 GA (General Availability) version and includes multiple new features and improvements. In this article, I will highlight some of the most important new features.&lt;/p>
&lt;h3 id="wasm-extensions">Wasm Extensions&lt;/h3>
&lt;p>In 1.1.0, EG introduces support for Wasm extensions in OCI image format through the &lt;code>EnvoyExtensionPolicy&lt;/code> CRD. OCI images facilitate easier management of different versions of Wasm extension plugins and support private images for enhanced access control and security.&lt;/p></description></item><item><title>Envoy Gateway v 1.1.0 版本发布：新功能与改进介绍</title><link>https://lopins.github.io/hugo-template/post/2024-06-16-eg-1.1.0/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2024-06-16-eg-1.1.0/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>Envoy Gateway（本文中简称 EG）在 7 月 23 日发布了最新的 1.1.0 版本。1.1.0 版本 EG 在 1.0 GA （General Availability）版本后的第一个功能更新版本，包含了多个新特性和改进。本文将为大家介绍我认为其中最重要的几个新特性。&lt;/p></description></item><item><title>How to Get the Client’s “Real” IP Address with Envoy Gateway ?</title><link>https://lopins.github.io/hugo-template/post/2024-05-17-client-ip-en/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2024-05-17-client-ip-en/</guid><description>&lt;p>Just as a river flows from its source through various bends before reaching the sea, a typical HTTP request travels from a client across multiple network hops until it reaches its destination server.&lt;/p>
&lt;p>During this journey, the request’s original IP address is lost as it moves through multiple network infrastructures such as proxy servers and load balancers. This happens because some of these hops terminate the TCP connection and create a new TCP connection with the next hop. As a result, the receiving server only sees the IP address of its directly connected hop in the chain rather than the client’s original IP address.&lt;/p></description></item><item><title>如何通过 Envoy Gateway 得到客户端的真实 IP 地址？</title><link>https://lopins.github.io/hugo-template/post/2024-05-17-client-ip/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2024-05-17-client-ip/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;blockquote>
&lt;p>河水出昆仑，东流经玉门，环绝壁，历五山，南至积石，东流入海。其流也，或曲或直，时急时缓，遇山则环，逢谷则奔。渐行渐远，百折千回，至于中原，汇百川，泽九州。其道也，蜿蜒盘旋，绵延万里，波澜壮阔，历千古而不息。——《水经注》&lt;/p></description></item><item><title>使用服务网格和 Envoy Gateway 构建客户端的可用性和弹性</title><link>https://lopins.github.io/hugo-template/post/2024-04-07-client-side-availability-and-resiliency/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2024-04-07-client-side-availability-and-resiliency/</guid><description>&lt;h2 id="如何从客户端角度思考服务的可用性和弹性">如何从客户端角度思考服务的可用性和弹性&lt;/h2>
&lt;blockquote>
&lt;p>这是一系列关于 Envoy Gateway 价值的文章之一，该网关已经达到了 1.0 版本的发布里程碑，可以投入生产使用。&lt;/p>
&lt;/blockquote>
&lt;p>在讨论可用性和弹性时，我们通常是从基础设施和服务的角度来探讨的。我们很少考虑是否可以在客户端采用某种方法来提高后端服务的“实际感知可用性”（即在客户端测量到的服务的可用性）。这主要是因为我们在大部分情况下都无法控制客户端与服务的交互方式。但实际上我们有办法对客户端和服务之间的交互进行控制，从而提高客户端对服务的“实际感知可用性”。&lt;/p></description></item><item><title>KubeCon NA - Introduce MetaProtocol Proxy: A Layer-7 Proxy Framework Powered by Envoy</title><link>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-metaprotocol/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-metaprotocol/</guid><description>&lt;p>Even with Envoy&amp;rsquo;s powerful filter extension mechanism, writing a proxy for none-http protocols from scratch can be challenging. MetaProtocol Proxy solves this by abstracting layer-7 proxy with a concept called metadata and providing a “batteries included” framework that includes common traffic management capabilities: load balancing, circuit breaker, routing, rate limiting, fault injection, observability, etc. To write a layer-7 proxy for a new protocol, the only thing you need to do is implementing the codec interface.&lt;/p></description></item><item><title>KubeCon 上海分享: Envoy Gateway - The API Gateway in the Cloud Native Era</title><link>https://lopins.github.io/hugo-template/post/2023-11-01-kubecon-shanghai-2023-envoy-gateway-the-api-gateway-in-the-cloud-native-era/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-11-01-kubecon-shanghai-2023-envoy-gateway-the-api-gateway-in-the-cloud-native-era/</guid><description>&lt;p>EnvoyProx 是云原生时代的代理之一，也是CNCF下的毕业项目之一。Envoy Gateway 是由 EnvoyProxy 的创始人 Matt Klein 发起的 API 网关项目。由我所在公司（Tetrate.io）以及 Emissary、Contour 等其他 API 网关项目共同维护。Envoy Gateway 作为 EnvoyProxy 发起的官方 API 网关项目，是基于 EnvoyProxy 的南北向 API 网关的官方实现，大大降低了使用 EnvoyProxy 的门槛，使用户不必重复“造轮子”来构建 EnvoyProxy 控制平面，并处理难以理解的复杂 xDS 协议和 EnvoyProxy 的配置。Envoy Gateway 使用 Kubernetes Gateway API 作为其配置，可以轻松启动管理南北向流量。Envoy Gateway 在多个社区和积极贡献者的推动下迅速发展。本主题将介绍为什么 Envoy Gateway 是云原生时代的 API 网关。&lt;/p></description></item><item><title>Aeraki Mesh Community Meeting - February 23rd, 2023</title><link>https://lopins.github.io/hugo-template/post/2023-02-24-aeraki-mesh-community-meeting/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-02-24-aeraki-mesh-community-meeting/</guid><description>&lt;p>During this community meeting, we introduced Aeraki Mesh’s newly released Access Log and Service Metrics features. We also invited experts from Boss Zhipin and Shopline to share hands-on examples of Dubbo based on Aeraki Mesh. Furthermore, we introduced the new features of multiplexing and Gateway support for the MetaProtocol application protocol, which are being contributed by the Tencent Games project and Boss Zhipin.&lt;/p>
&lt;p>The Access Log and Service Metrics functionalities will help users better understand their network performance, troubleshoot issues, and optimize their applications. We’re excited to see how these new features will improve our users&amp;rsquo; experiences with Aeraki Mesh.&lt;/p></description></item><item><title>Aeraki Mesh 社区例会 - 2023-02-23</title><link>https://lopins.github.io/hugo-template/post/2023-02-24-aeraki-mesh-community-meeting-en/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-02-24-aeraki-mesh-community-meeting-en/</guid><description>&lt;p>本次社区会议介绍了 Aeraki Mesh 最新发布的 Access Log，Sevice Metrics 功能，并邀请了来自 Boss 直聘，Shopline 的专家分享基于 Aeraki Mesh 的 Dubbo 实操案例。此外，还介绍了来着腾讯游戏项目和 Boss 直聘正在贡献的多路复用和 Gateway 支持 MetaProtocol 应用协议的新特性。&lt;/p></description></item><item><title>深入理解 Istio Metrics</title><link>https://lopins.github.io/hugo-template/post/2023-02-14-istio-metrics-deep-dive/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-02-14-istio-metrics-deep-dive/</guid><description>&lt;p>Istio 为 Service Mesh 中的微服务提供了非常丰富的统计指标（Metrics），这些指标可以让运维人员随时监控应用程序中服务的健康状况，在系统出现线上故障之前就发现潜在问题并进行处理。本文将介绍 Istio Metrics 的实现机制，以帮助读者深入了解其原理。&lt;/p></description></item><item><title>Aeraki Mesh 提供服务级别的 Metrics</title><link>https://lopins.github.io/hugo-template/post/2023-02-06-aeraki-metrics/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-02-06-aeraki-metrics/</guid><description>&lt;p>在刚刚发布的最新版本 Aeraki Mesh 1.2.2 中 (对应 meta-protocol-proxy:1.2.3) ，Aeraki Mesh 提供了和 Istio 一致的服务级别指标，包括 istio_requests_total，istio_request_duration_milliseconds，istio_request_byte 和 istio_response_byte。标志着 Aeraki Mesh 为非 HTTP 协议提供的服务治理能力和 HTTP 协议完全对齐，完整覆盖了路由，调用跟踪，访问日志，服务指标等所有能力。&lt;/p></description></item><item><title>5分钟内将 Dubbo 服务接入 Istio 服务网格</title><link>https://lopins.github.io/hugo-template/post/2022-11-18-dubbo-aeraki-mesh-in-5-minutes/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-11-18-dubbo-aeraki-mesh-in-5-minutes/</guid><description>&lt;p>&lt;a href="https://zhaohuabing.com/web-slides/manage-dubbo-in-istio-in-5-minutes/">幻灯片&lt;/a>
&lt;a href="https://aeraki.net">Aeraki Mesh 官网&lt;/a>
&lt;a href="https://www.aeraki.net/zh/docs/v1.x/tutorials/dubbo">Dubbo 接入教程&lt;/a>
&lt;a href="https://www.aeraki.net/zh/docs/v1.x/tutorials/implement-a-custom-protocol">私有协议接入教程&lt;/a>
&lt;a href="https://github.com/aeraki-mesh">Github&lt;/a>&lt;/p>

&lt;link rel="stylesheet" href="https://lopins.github.io/hugo-template/css/hugo-easy-gallery.css" />
&lt;div class="box" >
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
 &lt;div class="img">
 &lt;img itemprop="thumbnail" src="https://zhaohuabing.com/web-slides/manage-dubbo-in-istio-in-5-minutes/0.png" />
 &lt;/div>
 &lt;a href="https://zhaohuabing.com/web-slides/manage-dubbo-in-istio-in-5-minutes/" itemprop="contentUrl">&lt;/a>
 &lt;/figure>
&lt;/div>




&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1fP411g7zN&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div></description></item><item><title>Istio Ambient 模式流量管理实现机制详解（三）</title><link>https://lopins.github.io/hugo-template/post/2022-10-17-ambient-deep-dive-3/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-10-17-ambient-deep-dive-3/</guid><description>&lt;p>本文将继续介绍 ambient 模式下四层流量处理的实现机制。本文将以 bookinfo 应用中 productpage 访问 reviews 的请求路径为例来分析一个请求从 client 端发出到 server 端处理的四层流量处理流程。&lt;/p>
&lt;p>reviews 有三个版本的 deployment，我们首先为 v1 和 v2 设置反亲和和亲和规则，以确保 reviews v1 和 productpage 部署在同一个 node 上，reviews v2 和 productpage 部署在不同 node 上，以模拟 client 和 server 分别处于相同 node 和不同 node 中这两种情况。&lt;/p></description></item><item><title>Istio Ambient 模式流量管理实现机制详解（二）</title><link>https://lopins.github.io/hugo-template/post/2022-09-11-ambient-deep-dive-2/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-11-ambient-deep-dive-2/</guid><description>&lt;p>ambient 模式中，应用 pod 通过 ztunnel 之间的安全通道进行通信。要实现这一点，Istio 需要劫持应用 pod 的 outbound 和 inbound 流量，并转发到 ztunnel 进行处理。这是如何实现的呢？&lt;/p>
&lt;p>Istio 采用了 iptables 规则和&lt;a href="https://en.wikipedia.org/wiki/Policy-based_routing">策略路由（Policy-based Routing）&lt;/a>来将应用 pod 的流量转发到 ztunnel。下面我们以 &lt;a href="https://www.zhaohuabing.com/post/2022-09-10-try-istio-ambient/">初探 Istio Ambient 模式&lt;/a> 中安装的 demo 为例来详细介绍 ambient 模式是如何对流量进行劫持，并转发到 ztunnel 中的。&lt;/p></description></item><item><title>Istio Ambient 模式流量管理实现机制详解（一）</title><link>https://lopins.github.io/hugo-template/post/2022-09-11-ambient-deep-dive-1/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-11-ambient-deep-dive-1/</guid><description>&lt;p>Istio ambient 模式采用了被称为 &lt;a href="https://www.zhaohuabing.com/post/2022-09-08-introducing-ambient-mesh/#%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA-ambient-mesh">HBONE&lt;/a> 的方式来连接 ztunnel 和 waypoint proxy。HBONE 是 HTTP-Based Overlay Network Environment 的缩写。虽然该名称是第一次看到，其实 HBONE 并不是 Istio 创建出来的一个新协议，而只是利用了 HTTP 协议标准提供的隧道能力。简单地说，ambient 模式采用了 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT">HTTP 的 CONNECT 方法&lt;/a> 在 ztunnel 和 waypoint proxy 创建了一个隧道，通过该隧道来传输数据。本文将分析 HBONE 的实现机制和原理。&lt;/p></description></item><item><title>Service Mesh Summit 2022 Dubbo Demo</title><link>https://lopins.github.io/hugo-template/post/2022-09-26-servicemesh-summit2022-dubbo-aeraki-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-26-servicemesh-summit2022-dubbo-aeraki-mesh/</guid><description>&lt;p>&lt;a href="https://aeraki.net">Aeraki Mesh 官网&lt;/a>
&lt;a href="https://zhaohuabing.com/zh/docs/v1.x/tutorials/dubbo">Dubbo 接入教程&lt;/a>
&lt;a href="https://www.aeraki.net/zh/docs/v1.x/tutorials/implement-a-custom-protocol">私有协议接入教程&lt;/a>
&lt;a href="https://github.com/aeraki-mesh">Github&lt;/a>&lt;/p>



&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1oe4y167kz&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div></description></item><item><title>脑动极光 Aeraki Mesh Dubbo 架构微服务治理实践应用</title><link>https://lopins.github.io/hugo-template/post/2022-09-27-aeraki-mesh-ngjg-use-case/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-27-aeraki-mesh-ngjg-use-case/</guid><description>&lt;p>&lt;a href="https://www.66nao.com/home">脑动极光&lt;/a> 在 Aeraki Mesh 社区会议上分享的 Dubbo 微服务治理实践。

 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/1.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/2.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/3.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/4.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/5.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/6.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/7.png" alt="">





&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1Ee4y1b7H2&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div>

&lt;/p></description></item><item><title>Try out Istio Ambient mode</title><link>https://lopins.github.io/hugo-template/post/2022-09-10-try-istio-ambient-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-10-try-istio-ambient-english/</guid><description>&lt;p>Ambient is a new data-plane model that Istio has just announced support for. In this post, we will try to install Istio’s ambient model and use the bookinfo demo to experience the L4 and L7 capabilities offered by ambient.&lt;/p>
&lt;blockquote>
&lt;p>Note: L4 refers to the four layers of the OSI standard network model, i.e., TCP layer processing. L7 refers to layer seven of the OSI standard network model, which is the application layer processing, generally referred to as HTTP protocol processing.&lt;/p></description></item><item><title>初探 Istio Ambient 模式</title><link>https://lopins.github.io/hugo-template/post/2022-09-10-try-istio-ambient/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-10-try-istio-ambient/</guid><description>&lt;p>Ambient 是 Istio 刚刚宣布支持的一种新的数据面模式，在本篇文章中，我们将尝试安装 Istio 的 ambient 模式，并采用 bookinfo demo 来体验 ambient 提供的 L4 和 L7 能力。&lt;/p>
&lt;blockquote>
&lt;p>备注： L4 指 OSI 标准网络模型的四层，即 TCP 层的处理。 L7 指 OSI 标准网络模型的七层，即应用层的处理，一般指的是 HTTP 协议的处理。&lt;/p></description></item><item><title>译文：Istio Ambient 模式安全架构深度解析</title><link>https://lopins.github.io/hugo-template/post/2022-09-09-ambient-mesh-security-deep-dive/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-09-ambient-mesh-security-deep-dive/</guid><description>&lt;p>深入分析刚刚公布的 &lt;a href="https://www.zhaohuabing.com/post/2022-09-08-introducing-ambient-mesh/">Istio ambient mesh&lt;/a>（Istio 的一个无 sidecar 数据平面）对于服务网格的安全来说意味着什么。&lt;/p>
&lt;p>我们最近发布了 Istio ambient mesh，它是 Istio 的一个无 sidecar 数据平面。正如&lt;a href="https://www.zhaohuabing.com/post/2022-09-08-introducing-ambient-mesh/">公告博客&lt;/a>中所说，我们使用 ambient mesh 解决的首要问题是简化操作、更广泛的应用兼容性、降低基础设施成本和提高性能。在设计 ambient 数据平面时，我们仔细地平衡操作、成本和性能的相关问题，同时避免牺牲安全或功能。由于 ambient 组件运行在应用 pod 之外，安全边界已经发生了变化&amp;ndash;我们相信会更好。在这篇博客中，我们将详细介绍这些变化，并比较与 sidecar 部署模式的差异。&lt;/p></description></item><item><title>译文：重磅消息 - Istio 引入 Ambient Mesh 模式</title><link>https://lopins.github.io/hugo-template/post/2022-09-08-introducing-ambient-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-08-introducing-ambient-mesh/</guid><description>&lt;p>译者按：Istio 于2022年9月7日宣布了一种全新的数据平面模式 “ambient mesh”（ambient 意思是“环境的”，这里指 ambient mesh 使用了环境中的共享代理而不是 sidecar，下文直接使用英文原文），简单地讲就是将数据面的代理从应用 pod 中剥离出来独立部署，以彻底解决 mesh 基础设施和应用部署耦合的问题。该变化是 Istio 自创建以来的第二次大的架构变动，也说明 Istio 社区在持续创新，以解决 service mesh 生产中面临的实际问题。&lt;/p></description></item><item><title>使用 Aeraki Mesh 实现零代码侵入的 Dubbo 服务调用跟踪</title><link>https://lopins.github.io/hugo-template/post/2022-09-06-aeraki-mesh-tracing/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-06-aeraki-mesh-tracing/</guid><description>&lt;h2 id="安装示例程序">安装示例程序&lt;/h2>
&lt;p>如果你还没有安装示例程序，请参照 &lt;a href="https://lopins.github.io/hugo-template/zh/docs/v1.0/quickstart/">快速开始&lt;/a> 安装 Aeraki，Istio 及示例程序。&lt;/p>
&lt;p>执行完成后，在 meta-dubbo 这个 NS 中安装了基于 MetaProtocol 实现的 Dubbo 协议的示例程序。
我们将采用该 Dubbo 示例程序来进行测试。Dubbo Demo 程序的调用关系为：dubbo-sample-consumer &amp;ndash;&amp;gt; dubbo-sample-provider &amp;ndash;&amp;gt; dubbo-sample-second-provider 。&lt;/p></description></item><item><title>MetaProtocol Proxy 代码解读：Connection Manager</title><link>https://lopins.github.io/hugo-template/post/2022-06-30-metaprotocol-proxy-connection-manager/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-06-30-metaprotocol-proxy-connection-manager/</guid><description>&lt;p>ConnectionManager 是 MeataProtocol Proxy 的入口类。想要了解 MetaProtocol Proxy 的实现原理，可以从该类着手。&lt;/p>
&lt;h2 id="envoy-network-filter-介绍">Envoy Network Filter 介绍&lt;/h2>
&lt;p>MetaProtocol Proxy 框架部分实现为 Envoy 中的一个 Network Filter。Enovy 通过 Listener 接收 Downstream 的连接，然后将收取到的 TCP 数据流发送给 TCP filter chain 中的 MetaProtocol Proxy 处理。&lt;/p></description></item><item><title>Aeraki Mesh 正式成为 CNCF 沙箱项目</title><link>https://lopins.github.io/hugo-template/post/2022-06-17-aeraki-mesh-cncf-sandbox/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-06-17-aeraki-mesh-cncf-sandbox/</guid><description>&lt;p>6月15日，我创建的 &lt;a href="https://aeraki.net">Aeraki Mesh&lt;/a> 项目通过了全球顶级开源基金会云原生计算基金会（CNCF）技术监督委员会评定，正式成为CNCF 沙箱项目！这意味着 Aeraki Mesh 得到了云原生开源社区的认可，而且加入 CNCF 也保证了项目的中立和开源开放，为 Aeraki Mesh 在云原生生态系统的进一步发展迈出了坚定的一步。&lt;/p></description></item><item><title>Istiocon 2022 分享：Tencent Music’s service mesh practice with Istio and Aeraki(Istio + Aeraki 在腾讯音乐的服务网格落地)</title><link>https://lopins.github.io/hugo-template/post/2022-04-26-aeraki-tencent-music-istiocon2022/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-04-26-aeraki-tencent-music-istiocon2022/</guid><description>&lt;h2 id="istiocon-介绍">IstioCon 介绍&lt;/h2>
&lt;p>IstioCon 是 Istio 社区一年一度举行的全球线上峰会，此次峰会包含主题演讲、技术演讲、闪电演讲、研讨会和路线图会议等多种形态，聚焦社区新特性、生产落地案例、动手实战、社区生态发展等话题。&lt;/p></description></item><item><title>腾讯云原生：Areaki Mesh 在 2022 冬奥会视频直播应用中的服务网格实践</title><link>https://lopins.github.io/hugo-template/post/2022-03-30-aeraki-mesh-winter-olympics-practice/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-03-30-aeraki-mesh-winter-olympics-practice/</guid><description>&lt;h2 id="主题简介">主题简介&lt;/h2>
&lt;p>服务网格已经成为微服务的基础设施，但目前主流的服务网格产品只能处理 HTTP 协议，不支持其他七层协议，是服务网格落地的主要困难之一。本次直播分享主要介绍腾讯云服务网格团队开源的 Aeraki Mesh 项目如何通过扩展 Istio 来支持 Thrift，Dubbo 等开源协议以及私有协议，并分享腾讯融媒体采用 Aeraki Mesh 支撑 2022 冬奥会视频直播的实践经验&lt;/p></description></item><item><title>Aeraki Mesh 加入 CNCF 云原生全景图</title><link>https://lopins.github.io/hugo-template/post/2022-03-02-aeraki-cncf-landscape/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-03-02-aeraki-cncf-landscape/</guid><description>&lt;p>近日，Aeraki Mesh 正式进入 CNCF 云原生全景图，位于 &lt;a href="https://landscape.cncf.io/card-mode?category=service-mesh&amp;amp;grouping=category">Service Mesh&lt;/a> 类别下。CNCF Landscape 在云原生实践过程中的每个环节帮助用户了解有哪些具体的软件和产品选择，Aeraki Mesh 进入 CNCF Landscape，意味着 Aeraki Mesh 正式成为了 CNCF 认可的构建云原生最佳实践中的一环。&lt;/p></description></item><item><title>Aeraki 教程系列：如何开发一个自定义协议？</title><link>https://lopins.github.io/hugo-template/post/2022-01-23-aeraki-how-to-implement-a-custom-protocol/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-01-23-aeraki-how-to-implement-a-custom-protocol/</guid><description>&lt;p>MetaProtocol Proxy 提供了一个良好的协议扩展机制，使得我们可以基于 MetaProtocol Proxy 快速实现一个自定义协议的七层代理。&lt;/p>
&lt;p>由于 MetaProtocol Proxy 已经实现了一个七层协议代理所需的大部分功能，包括七层负载均衡、RDS 动态路由、本地限流、全局限流、请求 Metrics 收集等，更多丰富的功能还在持续开发中。因此基于 MetaProtocol 进行开发极大简化了实现一个七层网络代理的工作，我们只需要实现编解码的少量代码，即可得到一个自定义协议的七层代理。一般来说，实现一个自定义协议只需要数百行代码。&lt;/p></description></item><item><title>Aeraki 教程系列：如何设置全局限流规则？</title><link>https://lopins.github.io/hugo-template/post/2022-01-13-aeraki-global-ratelimit/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-01-13-aeraki-global-ratelimit/</guid><description>&lt;p>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理私有协议的七层流量。&lt;/p></description></item><item><title>Aeraki 教程系列：如何设置本地限流规则？</title><link>https://lopins.github.io/hugo-template/post/2022-01-12-aeraki-local-ratelimit/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-01-12-aeraki-local-ratelimit/</guid><description>&lt;p>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理私有协议的七层流量。&lt;/p></description></item><item><title>Aeraki 教程系列：如何设置路由规则？</title><link>https://lopins.github.io/hugo-template/post/2022-01-11-aeraki-routing/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-01-11-aeraki-routing/</guid><description>&lt;p>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理私有协议的七层流量。&lt;/p></description></item><item><title>译文：服务网格将使用 eBPF ？是的，但 Envoy 代理将继续存在</title><link>https://lopins.github.io/hugo-template/post/2021-12-19-ebpf-for-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-12-19-ebpf-for-service-mesh/</guid><description>&lt;p>译者按：这篇博客非常清晰地阐述了目前很热的 eBPF 和 Service Mesh 的关系，并分别介绍 Envoy 在几种不同的数据平面架构模型中的位置，以及这几种架构模型各自的优势和权衡。最近我和同事以及社区的同学就引入 eBPF 之后 Service Mesh 的架构演进做了一些讨论，结论和 Solo 的这篇博客中的某些观点类似。作为 Linux 内核的一种扩展能力，eBPF 并不会替换 Envoy 的七层代理能力，而是作为 Service Mesh 数据面的一个增强技术。&lt;/p></description></item><item><title>Aeraki Mesh</title><link>https://lopins.github.io/hugo-template/post/2021-09-27-aeraki/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-09-27-aeraki/</guid><description>&lt;p>Aeraki [Air-rah-ki] Mesh is an open-source service mesh I started about a year ago, and have been working on it till recently. Aeraki is the Greek word for ‘breeze’. While Istio connects microservices in a service mesh, Aeraki Mesh provides a non-intrusive, highly extendable way to allow Istio to support none-HTTP open-source and proprietary protocols. I hope this breeze can help Istio and service mesh sail a little further.&lt;/p></description></item><item><title>Istio 运维实战（电子书）</title><link>https://lopins.github.io/hugo-template/post/2021-10-08-istio-operation-bible/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-10-08-istio-operation-bible/</guid><description>&lt;h3 id="istio-运维实战">Istio 运维实战&lt;/h3>
&lt;p>通过将微服务中原本在 SDK 中实现的应用流量管理、可见性、通信安全等服务治理能力下放到一个专门的“服务网格”基础设施中，Istio 解开了微服务的服务治理需求和业务逻辑之间的代码、编译、部署时机等的耦合，让微服务真正做到了承诺的“按需选择开发语言”，“独立部署升级”等能力，提升了微服务开发和部署的敏捷性，释放了微服务模式的生产力。&lt;/p></description></item><item><title>Envoy 源码流程图</title><link>https://lopins.github.io/hugo-template/post/2021-08-11-envoy-code/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-08-11-envoy-code/</guid><description>&lt;p>最近在实现 &lt;a href="https://github.com/aeraki-mesh/meta-protocol-proxy">MetaProtocol&lt;/a> 时阅读了 Envoy 相关的一些源码。这里将一些重要流程的时序图记录下来，以备后续查看。&lt;/p>
&lt;h1 id="tcp-proxy">TCP Proxy&lt;/h1>

&lt;link rel="stylesheet" href="https://lopins.github.io/hugo-template/css/hugo-easy-gallery.css" />
&lt;div class="box" >
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
 &lt;div class="img">
 &lt;img itemprop="thumbnail" src="https://zhaohuabing.com/static/img/2021-08-11-envoy-code/tcpproxy.png" alt="TCP Proxy 时序图"/>
 &lt;/div>
 &lt;a href="https://zhaohuabing.com/static/img/2021-08-11-envoy-code/tcpproxy.png" itemprop="contentUrl">&lt;/a>
 &lt;figcaption align="center">
 &lt;p>TCP Proxy 时序图&lt;/p>
 &lt;/figcaption>
 &lt;/figure>
&lt;/div>

&lt;h1 id="dubbo-proxy">Dubbo Proxy&lt;/h1>


&lt;div class="box" >
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
 &lt;div class="img">
 &lt;img itemprop="thumbnail" src="https://zhaohuabing.com/static/img/2021-08-11-envoy-code/dubboproxy.png" alt="Dubbo Proxy 时序图"/>
 &lt;/div>
 &lt;a href="https://zhaohuabing.com/static/img/2021-08-11-envoy-code/dubboproxy.png" itemprop="contentUrl">&lt;/a>
 &lt;figcaption align="center">
 &lt;p>Dubbo Proxy 时序图&lt;/p></description></item><item><title>Istio Meetup China：全栈服务网格 - Aeraki 助你在 Istio 服务网格中管理任何七层流量</title><link>https://lopins.github.io/hugo-template/post/2021-07-10-full-stack-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-07-10-full-stack-service-mesh/</guid><description>&lt;h2 id="主题简介">主题简介&lt;/h2>
&lt;p>流量管理是 Istio 服务网格的核心能力，然而 Istio 缺省只提供了 HTTP 和 gRPC 两种协议的七层管理能力。对于微服务中常用的其他协议，包括 RPC、Messaging、Cache、Database等，Istio 只支持在四层上对这些协议进行处理。这导致我们将微服务应用迁移到 Istio 服务网格时，无法充分利用服务网格提供的流量管理能力。开源项目 Aeraki 提供了一个第三方协议的扩展框架，支持在 Istio 中对任意七层流量进行管理，提供动态路由、负载均衡、熔断等流量管理能力。本次分享将介绍如何使用 Aeraki 在 Istio 服务网格中管理任何七层协议，包括 Thrift，Dubbo，Redis，以及私有 RPC 协议等，并演示一个使用 Aeraki 管理第三方 RPC 协议的示例。&lt;/p></description></item><item><title>IstioCon 2021: How to Manage Any Layer-7 Traffic in an Istio Service Mesh?</title><link>https://lopins.github.io/hugo-template/post/2021-03-02-manage-any-layer-7-traffic-in-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-03-02-manage-any-layer-7-traffic-in-istio/</guid><description>&lt;p>备注：本文根据腾讯云赵化冰和知乎唐阳在 IstioCon 2021 中的演讲 &lt;a href="https://events.istio.io/istiocon-2021/sessions/how-to-manage-any-layer-7-traffic-in-an-istio-service-mesh/">“How to Manage Any Layer-7 Traffic in an Istio Service Mesh?”&lt;/a> 整理而成。&lt;/p>
&lt;p>大家好，今天我们想和大家分享的主题是如何扩展 Istio 以支持任何七层协议？作为云原生领域中一个人气非常高的开源项目， Istio 目前已经基本成为了 Service Mesh 的事实标准。腾讯云上也提供了基于 Istio 进行增强，和 Istio API 完全兼容的 Service Mesh 管理服务 TCM（Tencent Cloud Mesh），以帮助我们的用户以较小的迁移成本和维护代价快速利用到 Service Mesh 提供的流量管理和服务治理能力。今天非常高兴能够有这个机会来和大家一起分享一下我们在此过程中的一些经验。&lt;/p></description></item><item><title>CNBPS 2020：Istio 流量管理原理与协议扩展</title><link>https://lopins.github.io/hugo-template/post/2020-12-07-cnbps2020-istio-traffic-management/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-12-07-cnbps2020-istio-traffic-management/</guid><description>&lt;p>通过本次的分享，听众可以理解Istio流量管理背后的实现原理，包括控制面流量管理模型和数据面流量转发机制。本次分享还将介绍如何对Istio进行扩展，以支持更多地七层协议，如dubbo，thrift，redis等等。&lt;/p></description></item><item><title>CNBPS 2020：云原生应用架构专场介绍</title><link>https://lopins.github.io/hugo-template/post/2020-11-12-cnbps2020/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-11-12-cnbps2020/</guid><description>&lt;p>11月19-21日，CNBPS 2020重磅回归！&lt;/p>
&lt;p>作为一年一度的云原生科技盛会，众多云原生届的“顶流”将在这里聚集，展现云原生世界的科技想象力。&lt;/p>
&lt;p>了解云原生趋势和最佳实践？来这一场就够了！&lt;/p></description></item><item><title>在 Istio 中实现 Redis 集群的数据分片、读写分离和流量镜像</title><link>https://lopins.github.io/hugo-template/post/2020-10-14-redis-cluster-with-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-10-14-redis-cluster-with-istio/</guid><description>&lt;p>Redis 是一个高性能的 key-value 存储系统，被广泛用于微服务架构中。如果我们想要使用 Redis 集群模式提供的高级特性，则需要对客户端代码进行改动，这带来了应用升级和维护的一些困难。利用 Istio 和 Envoy ，我们可以在不修改客户端代码的前提下实现客户端无感知的 Redis Cluster 数据分片，并提供读写分离、流量镜像等高级流量管理功能。&lt;/p></description></item><item><title>Istio 运维实战系列（3）：让人头大的『无头服务』-下</title><link>https://lopins.github.io/hugo-template/post/2020-09-19-headless-mtls/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-09-19-headless-mtls/</guid><description>&lt;p>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方法。&lt;/p></description></item><item><title>Istio 运维实战系列（2）：让人头大的『无头服务』-上</title><link>https://lopins.github.io/hugo-template/post/2020-09-11-headless-mtls/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-09-11-headless-mtls/</guid><description>&lt;p>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方法。&lt;/p></description></item><item><title>Istio 运维实战系列（1）：应用容器对 Envoy Sidecar 的启动依赖问题</title><link>https://lopins.github.io/hugo-template/post/2020-09-05-istio-sidecar-dependency/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-09-05-istio-sidecar-dependency/</guid><description>&lt;p>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方法。&lt;/p></description></item><item><title>Istio流量管理实现机制深度解析</title><link>https://lopins.github.io/hugo-template/post/2018-09-25-istio-traffic-management-impl-intro/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-09-25-istio-traffic-management-impl-intro/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Istio作为一个service mesh开源项目,其中最重要的功能就是对网格中微服务之间的流量进行管理,包括服务发现,请求路由和服务间的可靠通信。Istio实现了service mesh的控制面，并整合Envoy开源项目作为数据面的sidecar，一起对流量进行控制。&lt;/p></description></item><item><title>如何降低Istio服务网格中Envoy的内存开销</title><link>https://lopins.github.io/hugo-template/post/2019-11-15-envoy-memory-optimize/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-11-15-envoy-memory-optimize/</guid><description>&lt;h2 id="envoy的内存占用">Envoy的内存占用&lt;/h2>
&lt;p>在Istio服务网格中，每个Envoy占用的内存也许并不算多，但所有sidecar增加的内存累积起来则是一个不小的数字。在进行商用部署时，我们需要考虑如何优化并减少服务网格带来的额外内存消耗。&lt;/p></description></item><item><title>Istio实战系列-Envoy Proxy构建分析</title><link>https://lopins.github.io/hugo-template/post/2018-10-29-envoy-build/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-10-29-envoy-build/</guid><description>&lt;p>Istio由控制面和数据面组成。其中Envoy是Istio在数据面缺省使用的转发代理，Istio利用Envoy的四层和七层代理功能对网格中微服务之间的调用流量进行转发。今天我们来分析一下Istio 使用到的Envoy构建流程。&lt;/p></description></item><item><title>Istio微服务平台集成实践</title><link>https://lopins.github.io/hugo-template/post/2018-10-18-istio-paas-integration/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-10-18-istio-paas-integration/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Istio发布1.0版本后，其服务发现和路由规则功能已基本具备production能力，我们也开始了Istio和公司内部微服务平台的集成工作，打算以Istio为基础打造一个微服务管控中心，在这里把目前的进展和遇到的坑和大家分享一下。&lt;/p></description></item><item><title>Istio流量管理实现机制深度解析</title><link>https://lopins.github.io/hugo-template/post/2018-09-25-istio-traffic-management-impl-intro/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-09-25-istio-traffic-management-impl-intro/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Istio作为一个service mesh开源项目,其中最重要的功能就是对网格中微服务之间的流量进行管理,包括服务发现,请求路由和服务间的可靠通信。Istio实现了service mesh的控制面，并整合Envoy开源项目作为数据面的sidecar，一起对流量进行控制。&lt;/p></description></item></channel></rss>