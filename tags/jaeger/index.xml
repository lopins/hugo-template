<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jaeger on Huabing Blog</title><link>https://lopins.github.io/hugo-template/tags/jaeger/</link><description>Recent content in Jaeger on Huabing Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 06 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://lopins.github.io/hugo-template/tags/jaeger/index.xml" rel="self" type="application/rss+xml"/><item><title>Online Lesson: Distributed Tracing with Jaeger, Kubernetes, and Istio</title><link>https://lopins.github.io/hugo-template/post/2021-09-08-distributed-tracing-with-jaeger-kubernetes-and-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-09-08-distributed-tracing-with-jaeger-kubernetes-and-istio/</guid><description>&lt;p>&lt;a href="https://www.manning.com/bundles/distributed-tracing-ser?utm_source=zhaohuabing&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=liveproject_zhao_distributed_9_7_21&amp;amp;a_aid=zhaohuabing&amp;amp;a_bid=ce8ffc93">&lt;strong>30% off&lt;/strong> 👉👉👉 Get this lesson now with my special discount!&lt;/a>
&lt;a href="https://www.manning.com/?utm_source=zhaohuabing&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=affiliate&amp;amp;a_aid=zhaohuabing">&lt;strong>30% off&lt;/strong> 👉👉👉 Get more Manning books with my special discount!&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.manning.com/bundles/distributed-tracing-ser?utm_source=zhaohuabing&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=liveproject_zhao_distributed_9_7_21&amp;amp;a_aid=zhaohuabing&amp;amp;a_bid=ce8ffc93">&lt;strong>优惠30%&lt;/strong> 👉👉👉 采用我的专属折扣链接购买本在线课程！&lt;/a>
&lt;a href="https://www.manning.com/?utm_source=zhaohuabing&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=affiliate&amp;amp;a_aid=zhaohuabing">&lt;strong>优惠30%&lt;/strong> 👉👉👉 采用我的专属折扣链接购买 Manning 书籍！&lt;/a>&lt;/p>
&lt;p>
 &lt;img src="https://zhaohuabing.com/static/img/2021-09-08-distributed-tracing-with-jaeger-kubernetes,-and-istio/manning-bundles-distributed-tracing.png" alt="">

&lt;/p></description></item><item><title>Enhance Istio Distributed Tracing with OpenTracing</title><link>https://lopins.github.io/hugo-template/post/2019-07-02-using-opentracing-with-istio-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-07-02-using-opentracing-with-istio-english/</guid><description>&lt;p>In the previous post, we discussed how to use Opentracing to help Istio Service Mesh to propagate tracing context across process boundaries, and how to enrich Istio/Envoy generated traces with method-level spans to get more fine-grained insights to the services.&lt;/p>
&lt;p>For now, all that we have been talking is just about synchronous RPC (HTTP/REST), however, we can’t ignore the fact that asynchronous messaging is also widely adopted as an inter-services communication mechanism. So in this post, we will continue to use the eshop demo to explore how asynchronous messaging, specifically Kafka, can be traced in Istio service mesh with the help of Opentracing.&lt;/p></description></item><item><title>Enhance Istio Distributed Tracing with OpenTracing</title><link>https://lopins.github.io/hugo-template/post/2019-06-22-using-opentracing-with-istio-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-06-22-using-opentracing-with-istio-english/</guid><description>&lt;p>While evolving towards a microservices architecture, the biggest change is that the monolith application has been divided into multiple independent processes(or services), as a result, a method call between software modules now becomes a remote procedure call go through multiple services.&lt;/p>
&lt;p>A client request usually goes through a couple of or even a dozen of services in a complex microservices system, which makes it really hard to figure out what’s going on when a request fails or becomes slow.&lt;/p></description></item><item><title>洞若观火：使用OpenTracing增强Istio的调用链跟踪</title><link>https://lopins.github.io/hugo-template/post/2019-07-02-using-opentracing-with-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-07-02-using-opentracing-with-istio/</guid><description>&lt;p>在上一篇文章中，我们通过一个网上商店的示例程序学习了如何使用Opentracing在Istio服务网格中传递分布式调用跟踪的上下文，以及如何将方法级的调用信息加入到Istio/Envoy生成的调用链中。采用Opentracing可以减少应用代码中传递HTTP header的重复代码；也可以根据需要在调用链中加入更细粒度的Span，以用于对系统性能瓶颈进行在线分析。&lt;/p></description></item><item><title>洞若观火：使用OpenTracing增强Istio的调用链跟踪</title><link>https://lopins.github.io/hugo-template/post/2019-06-22-using-opentracing-with-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-06-22-using-opentracing-with-istio/</guid><description>&lt;h1 id="分布式调用跟踪和opentracing规范">分布式调用跟踪和Opentracing规范&lt;/h1>
&lt;h2 id="什么是分布式调用跟踪">什么是分布式调用跟踪？&lt;/h2>
&lt;p>相比传统的“巨石”应用，微服务的一个主要变化是将应用中的不同模块拆分为了独立的进程。在微服务架构下，原来进程内的方法调用成为了跨进程的RPC调用。相对于单一进程的方法调用，跨进程调用的调试和故障分析是非常困难的，很难用传统的调试器或者日志打印来对分布式调用进行查看和分析。

 &lt;img src="https://zhaohuabing.com/static/img/2019-06-22-using-opentracing-with-istio/monolith-microserivce.jpg" alt="">


如上图所示，一个来自客户端的请求经过了多个微服务进程。如果要对该请求进行分析，则必须将该请求经过的所有服务的相关信息都收集起来并关联在一起，这就是“分布式调用跟踪”。&lt;/p></description></item></channel></rss>