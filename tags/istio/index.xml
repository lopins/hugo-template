<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Istio on Huabing Blog</title><link>https://lopins.github.io/hugo-template/tags/istio/</link><description>Recent content in Istio on Huabing Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 16 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://lopins.github.io/hugo-template/tags/istio/index.xml" rel="self" type="application/rss+xml"/><item><title>KubeCon 芝加哥现场报道 - Envoy Gateway Maintainer Alice Wasko</title><link>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-lin-alice-wasko/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-lin-alice-wasko/</guid><description>&lt;h2 id="videos">Videos&lt;/h2>
&lt;p>Bilibili



&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1PQ4y1b74N&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div>

&lt;/p>
&lt;p>YouTube


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/vfLVVE6b9q0?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div>
&lt;/p>
&lt;p>采访内容(待整理):&lt;/p>
&lt;p>Huabing: I will introduce this interview first in Chinese, because the audience are from China. Envoy Gateway 社区的朋友大家好，我们今天有幸邀请到了 Envoy Gateway 的维护者，来自 Emissary 的 Alice。 Alice 从 Envoy Gateway 创建之初就参与了这个项目，今天很有幸能够在 KubeCon 现场对她进行采访。下面我将用英文对 Alice 进行采访。&lt;/p></description></item><item><title>KubeCon 芝加哥现场报道 - Istio 创始人 Varun Talwar 解密 Istio 开源背后的故事</title><link>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-varun-talwar-interview/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-varun-talwar-interview/</guid><description>&lt;h2 id="videos">Videos&lt;/h2>
&lt;p>Bilibili



&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1ZG411S75r&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div>

&lt;/p>
&lt;p>YouTube


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/JtD5wL5WABI?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div>
&lt;/p>
&lt;p>采访内容(译文):
Huabing：你好， Varun，感谢你接受我们的采访。Varun Talwar 是著名开源项目 Istio 的创始人之一，也是硅谷科技初创公司 Tetrate.io 的联合创始人。那么 Varun，首先能不能给我们简单介绍一下你自己，以及你的背景？&lt;/p></description></item><item><title>KubeCon 芝加哥现场报道 - Istio 技术指导委员会成员 Lin Sun 分享 Istio 项目历史与未来展望</title><link>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-lin-sun-interview/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-lin-sun-interview/</guid><description>&lt;h2 id="videos">Videos&lt;/h2>
&lt;p>Bilibili



&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1Zj411E7wH&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div>

&lt;/p>
&lt;p>YouTube


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/O-bHqDpStoE?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div>
&lt;/p>
&lt;p>采访内容(待整理):&lt;/p>
&lt;p>Um OK. Let&amp;rsquo;s just switch the image. OK. Um I think you already give us a little bit of background and interaction on yourself. So I, I think it&amp;rsquo;s fair to say you are one of the founder, etcetera.&lt;/p></description></item><item><title>KubeCon 芝加哥现场报道 - Istio 社区核心维护者 John Howard 分享他高效的秘诀</title><link>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-john-howard-interview/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-11-16-kubecon-na-john-howard-interview/</guid><description>&lt;h2 id="videos">Videos&lt;/h2>
&lt;p>Bilibili



&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1j94y1H7ZX&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div>

&lt;/p>
&lt;p>YouTube


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3sTj5lmoP6c?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div>
&lt;/p>
&lt;p>采访内容(待整理):&lt;/p>
&lt;p>Huabing: OK, let&amp;rsquo;s welcome our superstar from Istio community. John Howard, Is my pronunciation correct?&lt;/p></description></item><item><title>Aeraki Mesh Community Meeting - February 23rd, 2023</title><link>https://lopins.github.io/hugo-template/post/2023-02-24-aeraki-mesh-community-meeting/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-02-24-aeraki-mesh-community-meeting/</guid><description>&lt;p>During this community meeting, we introduced Aeraki Mesh’s newly released Access Log and Service Metrics features. We also invited experts from Boss Zhipin and Shopline to share hands-on examples of Dubbo based on Aeraki Mesh. Furthermore, we introduced the new features of multiplexing and Gateway support for the MetaProtocol application protocol, which are being contributed by the Tencent Games project and Boss Zhipin.&lt;/p>
&lt;p>The Access Log and Service Metrics functionalities will help users better understand their network performance, troubleshoot issues, and optimize their applications. We’re excited to see how these new features will improve our users&amp;rsquo; experiences with Aeraki Mesh.&lt;/p></description></item><item><title>Aeraki Mesh 社区例会 - 2023-02-23</title><link>https://lopins.github.io/hugo-template/post/2023-02-24-aeraki-mesh-community-meeting-en/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-02-24-aeraki-mesh-community-meeting-en/</guid><description>&lt;p>本次社区会议介绍了 Aeraki Mesh 最新发布的 Access Log，Sevice Metrics 功能，并邀请了来自 Boss 直聘，Shopline 的专家分享基于 Aeraki Mesh 的 Dubbo 实操案例。此外，还介绍了来着腾讯游戏项目和 Boss 直聘正在贡献的多路复用和 Gateway 支持 MetaProtocol 应用协议的新特性。&lt;/p></description></item><item><title>深入理解 Istio Metrics</title><link>https://lopins.github.io/hugo-template/post/2023-02-14-istio-metrics-deep-dive/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-02-14-istio-metrics-deep-dive/</guid><description>&lt;p>Istio 为 Service Mesh 中的微服务提供了非常丰富的统计指标（Metrics），这些指标可以让运维人员随时监控应用程序中服务的健康状况，在系统出现线上故障之前就发现潜在问题并进行处理。本文将介绍 Istio Metrics 的实现机制，以帮助读者深入了解其原理。&lt;/p></description></item><item><title>Aeraki Mesh 提供服务级别的 Metrics</title><link>https://lopins.github.io/hugo-template/post/2023-02-06-aeraki-metrics/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2023-02-06-aeraki-metrics/</guid><description>&lt;p>在刚刚发布的最新版本 Aeraki Mesh 1.2.2 中 (对应 meta-protocol-proxy:1.2.3) ，Aeraki Mesh 提供了和 Istio 一致的服务级别指标，包括 istio_requests_total，istio_request_duration_milliseconds，istio_request_byte 和 istio_response_byte。标志着 Aeraki Mesh 为非 HTTP 协议提供的服务治理能力和 HTTP 协议完全对齐，完整覆盖了路由，调用跟踪，访问日志，服务指标等所有能力。&lt;/p></description></item><item><title>5分钟内将 Dubbo 服务接入 Istio 服务网格</title><link>https://lopins.github.io/hugo-template/post/2022-11-18-dubbo-aeraki-mesh-in-5-minutes/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-11-18-dubbo-aeraki-mesh-in-5-minutes/</guid><description>&lt;p>&lt;a href="https://zhaohuabing.com/web-slides/manage-dubbo-in-istio-in-5-minutes/">幻灯片&lt;/a>
&lt;a href="https://aeraki.net">Aeraki Mesh 官网&lt;/a>
&lt;a href="https://www.aeraki.net/zh/docs/v1.x/tutorials/dubbo">Dubbo 接入教程&lt;/a>
&lt;a href="https://www.aeraki.net/zh/docs/v1.x/tutorials/implement-a-custom-protocol">私有协议接入教程&lt;/a>
&lt;a href="https://github.com/aeraki-mesh">Github&lt;/a>&lt;/p>

&lt;link rel="stylesheet" href="https://lopins.github.io/hugo-template/css/hugo-easy-gallery.css" />
&lt;div class="box" >
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
 &lt;div class="img">
 &lt;img itemprop="thumbnail" src="https://zhaohuabing.com/web-slides/manage-dubbo-in-istio-in-5-minutes/0.png" />
 &lt;/div>
 &lt;a href="https://zhaohuabing.com/web-slides/manage-dubbo-in-istio-in-5-minutes/" itemprop="contentUrl">&lt;/a>
 &lt;/figure>
&lt;/div>




&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1fP411g7zN&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div></description></item><item><title>Istio Ambient 模式流量管理实现机制详解（三）</title><link>https://lopins.github.io/hugo-template/post/2022-10-17-ambient-deep-dive-3/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-10-17-ambient-deep-dive-3/</guid><description>&lt;p>本文将继续介绍 ambient 模式下四层流量处理的实现机制。本文将以 bookinfo 应用中 productpage 访问 reviews 的请求路径为例来分析一个请求从 client 端发出到 server 端处理的四层流量处理流程。&lt;/p>
&lt;p>reviews 有三个版本的 deployment，我们首先为 v1 和 v2 设置反亲和和亲和规则，以确保 reviews v1 和 productpage 部署在同一个 node 上，reviews v2 和 productpage 部署在不同 node 上，以模拟 client 和 server 分别处于相同 node 和不同 node 中这两种情况。&lt;/p></description></item><item><title>Istio Ambient 模式流量管理实现机制详解（二）</title><link>https://lopins.github.io/hugo-template/post/2022-09-11-ambient-deep-dive-2/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-11-ambient-deep-dive-2/</guid><description>&lt;p>ambient 模式中，应用 pod 通过 ztunnel 之间的安全通道进行通信。要实现这一点，Istio 需要劫持应用 pod 的 outbound 和 inbound 流量，并转发到 ztunnel 进行处理。这是如何实现的呢？&lt;/p>
&lt;p>Istio 采用了 iptables 规则和&lt;a href="https://en.wikipedia.org/wiki/Policy-based_routing">策略路由（Policy-based Routing）&lt;/a>来将应用 pod 的流量转发到 ztunnel。下面我们以 &lt;a href="https://www.zhaohuabing.com/post/2022-09-10-try-istio-ambient/">初探 Istio Ambient 模式&lt;/a> 中安装的 demo 为例来详细介绍 ambient 模式是如何对流量进行劫持，并转发到 ztunnel 中的。&lt;/p></description></item><item><title>Istio Ambient 模式流量管理实现机制详解（一）</title><link>https://lopins.github.io/hugo-template/post/2022-09-11-ambient-deep-dive-1/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-11-ambient-deep-dive-1/</guid><description>&lt;p>Istio ambient 模式采用了被称为 &lt;a href="https://www.zhaohuabing.com/post/2022-09-08-introducing-ambient-mesh/#%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA-ambient-mesh">HBONE&lt;/a> 的方式来连接 ztunnel 和 waypoint proxy。HBONE 是 HTTP-Based Overlay Network Environment 的缩写。虽然该名称是第一次看到，其实 HBONE 并不是 Istio 创建出来的一个新协议，而只是利用了 HTTP 协议标准提供的隧道能力。简单地说，ambient 模式采用了 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT">HTTP 的 CONNECT 方法&lt;/a> 在 ztunnel 和 waypoint proxy 创建了一个隧道，通过该隧道来传输数据。本文将分析 HBONE 的实现机制和原理。&lt;/p></description></item><item><title>Service Mesh Summit 2022 Dubbo Demo</title><link>https://lopins.github.io/hugo-template/post/2022-09-26-servicemesh-summit2022-dubbo-aeraki-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-26-servicemesh-summit2022-dubbo-aeraki-mesh/</guid><description>&lt;p>&lt;a href="https://aeraki.net">Aeraki Mesh 官网&lt;/a>
&lt;a href="https://zhaohuabing.com/zh/docs/v1.x/tutorials/dubbo">Dubbo 接入教程&lt;/a>
&lt;a href="https://www.aeraki.net/zh/docs/v1.x/tutorials/implement-a-custom-protocol">私有协议接入教程&lt;/a>
&lt;a href="https://github.com/aeraki-mesh">Github&lt;/a>&lt;/p>



&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1oe4y167kz&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div></description></item><item><title>脑动极光 Aeraki Mesh Dubbo 架构微服务治理实践应用</title><link>https://lopins.github.io/hugo-template/post/2022-09-27-aeraki-mesh-ngjg-use-case/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-27-aeraki-mesh-ngjg-use-case/</guid><description>&lt;p>&lt;a href="https://www.66nao.com/home">脑动极光&lt;/a> 在 Aeraki Mesh 社区会议上分享的 Dubbo 微服务治理实践。

 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/1.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/2.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/3.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/4.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/5.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/6.png" alt="">



 &lt;img src="https://zhaohuabing.com/static/img/2022-09-ndjg-dubbo-aeraki-mesh/7.png" alt="">





&lt;style>
 #biliplayer {
 width: 100%;
 height: 600px;
 }
 @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
 #biliplayer {
 width: 100%;
 height: 250px;
 }
 }
&lt;/style>


 &lt;div>
 &lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?bvid=BV1Ee4y1b7H2&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" >&lt;/iframe>
 &lt;/div>

&lt;/p></description></item><item><title>Try out Istio Ambient mode</title><link>https://lopins.github.io/hugo-template/post/2022-09-10-try-istio-ambient-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-10-try-istio-ambient-english/</guid><description>&lt;p>Ambient is a new data-plane model that Istio has just announced support for. In this post, we will try to install Istio’s ambient model and use the bookinfo demo to experience the L4 and L7 capabilities offered by ambient.&lt;/p>
&lt;blockquote>
&lt;p>Note: L4 refers to the four layers of the OSI standard network model, i.e., TCP layer processing. L7 refers to layer seven of the OSI standard network model, which is the application layer processing, generally referred to as HTTP protocol processing.&lt;/p></description></item><item><title>初探 Istio Ambient 模式</title><link>https://lopins.github.io/hugo-template/post/2022-09-10-try-istio-ambient/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-10-try-istio-ambient/</guid><description>&lt;p>Ambient 是 Istio 刚刚宣布支持的一种新的数据面模式，在本篇文章中，我们将尝试安装 Istio 的 ambient 模式，并采用 bookinfo demo 来体验 ambient 提供的 L4 和 L7 能力。&lt;/p>
&lt;blockquote>
&lt;p>备注： L4 指 OSI 标准网络模型的四层，即 TCP 层的处理。 L7 指 OSI 标准网络模型的七层，即应用层的处理，一般指的是 HTTP 协议的处理。&lt;/p></description></item><item><title>译文：Istio Ambient 模式安全架构深度解析</title><link>https://lopins.github.io/hugo-template/post/2022-09-09-ambient-mesh-security-deep-dive/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-09-ambient-mesh-security-deep-dive/</guid><description>&lt;p>深入分析刚刚公布的 &lt;a href="https://www.zhaohuabing.com/post/2022-09-08-introducing-ambient-mesh/">Istio ambient mesh&lt;/a>（Istio 的一个无 sidecar 数据平面）对于服务网格的安全来说意味着什么。&lt;/p>
&lt;p>我们最近发布了 Istio ambient mesh，它是 Istio 的一个无 sidecar 数据平面。正如&lt;a href="https://www.zhaohuabing.com/post/2022-09-08-introducing-ambient-mesh/">公告博客&lt;/a>中所说，我们使用 ambient mesh 解决的首要问题是简化操作、更广泛的应用兼容性、降低基础设施成本和提高性能。在设计 ambient 数据平面时，我们仔细地平衡操作、成本和性能的相关问题，同时避免牺牲安全或功能。由于 ambient 组件运行在应用 pod 之外，安全边界已经发生了变化&amp;ndash;我们相信会更好。在这篇博客中，我们将详细介绍这些变化，并比较与 sidecar 部署模式的差异。&lt;/p></description></item><item><title>译文：重磅消息 - Istio 引入 Ambient Mesh 模式</title><link>https://lopins.github.io/hugo-template/post/2022-09-08-introducing-ambient-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-09-08-introducing-ambient-mesh/</guid><description>&lt;p>译者按：Istio 于2022年9月7日宣布了一种全新的数据平面模式 “ambient mesh”（ambient 意思是“环境的”，这里指 ambient mesh 使用了环境中的共享代理而不是 sidecar，下文直接使用英文原文），简单地讲就是将数据面的代理从应用 pod 中剥离出来独立部署，以彻底解决 mesh 基础设施和应用部署耦合的问题。该变化是 Istio 自创建以来的第二次大的架构变动，也说明 Istio 社区在持续创新，以解决 service mesh 生产中面临的实际问题。&lt;/p></description></item><item><title>Aeraki Mesh 正式成为 CNCF 沙箱项目</title><link>https://lopins.github.io/hugo-template/post/2022-06-17-aeraki-mesh-cncf-sandbox/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-06-17-aeraki-mesh-cncf-sandbox/</guid><description>&lt;p>6月15日，我创建的 &lt;a href="https://aeraki.net">Aeraki Mesh&lt;/a> 项目通过了全球顶级开源基金会云原生计算基金会（CNCF）技术监督委员会评定，正式成为CNCF 沙箱项目！这意味着 Aeraki Mesh 得到了云原生开源社区的认可，而且加入 CNCF 也保证了项目的中立和开源开放，为 Aeraki Mesh 在云原生生态系统的进一步发展迈出了坚定的一步。&lt;/p></description></item><item><title>Istiocon 2022 分享：Tencent Music’s service mesh practice with Istio and Aeraki(Istio + Aeraki 在腾讯音乐的服务网格落地)</title><link>https://lopins.github.io/hugo-template/post/2022-04-26-aeraki-tencent-music-istiocon2022/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-04-26-aeraki-tencent-music-istiocon2022/</guid><description>&lt;h2 id="istiocon-介绍">IstioCon 介绍&lt;/h2>
&lt;p>IstioCon 是 Istio 社区一年一度举行的全球线上峰会，此次峰会包含主题演讲、技术演讲、闪电演讲、研讨会和路线图会议等多种形态，聚焦社区新特性、生产落地案例、动手实战、社区生态发展等话题。&lt;/p></description></item><item><title>腾讯云原生：Areaki Mesh 在 2022 冬奥会视频直播应用中的服务网格实践</title><link>https://lopins.github.io/hugo-template/post/2022-03-30-aeraki-mesh-winter-olympics-practice/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-03-30-aeraki-mesh-winter-olympics-practice/</guid><description>&lt;h2 id="主题简介">主题简介&lt;/h2>
&lt;p>服务网格已经成为微服务的基础设施，但目前主流的服务网格产品只能处理 HTTP 协议，不支持其他七层协议，是服务网格落地的主要困难之一。本次直播分享主要介绍腾讯云服务网格团队开源的 Aeraki Mesh 项目如何通过扩展 Istio 来支持 Thrift，Dubbo 等开源协议以及私有协议，并分享腾讯融媒体采用 Aeraki Mesh 支撑 2022 冬奥会视频直播的实践经验&lt;/p></description></item><item><title>Aeraki Mesh 加入 CNCF 云原生全景图</title><link>https://lopins.github.io/hugo-template/post/2022-03-02-aeraki-cncf-landscape/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-03-02-aeraki-cncf-landscape/</guid><description>&lt;p>近日，Aeraki Mesh 正式进入 CNCF 云原生全景图，位于 &lt;a href="https://landscape.cncf.io/card-mode?category=service-mesh&amp;amp;grouping=category">Service Mesh&lt;/a> 类别下。CNCF Landscape 在云原生实践过程中的每个环节帮助用户了解有哪些具体的软件和产品选择，Aeraki Mesh 进入 CNCF Landscape，意味着 Aeraki Mesh 正式成为了 CNCF 认可的构建云原生最佳实践中的一环。&lt;/p></description></item><item><title>Aeraki 教程系列：如何开发一个自定义协议？</title><link>https://lopins.github.io/hugo-template/post/2022-01-23-aeraki-how-to-implement-a-custom-protocol/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-01-23-aeraki-how-to-implement-a-custom-protocol/</guid><description>&lt;p>MetaProtocol Proxy 提供了一个良好的协议扩展机制，使得我们可以基于 MetaProtocol Proxy 快速实现一个自定义协议的七层代理。&lt;/p>
&lt;p>由于 MetaProtocol Proxy 已经实现了一个七层协议代理所需的大部分功能，包括七层负载均衡、RDS 动态路由、本地限流、全局限流、请求 Metrics 收集等，更多丰富的功能还在持续开发中。因此基于 MetaProtocol 进行开发极大简化了实现一个七层网络代理的工作，我们只需要实现编解码的少量代码，即可得到一个自定义协议的七层代理。一般来说，实现一个自定义协议只需要数百行代码。&lt;/p></description></item><item><title>Aeraki 教程系列：如何设置全局限流规则？</title><link>https://lopins.github.io/hugo-template/post/2022-01-13-aeraki-global-ratelimit/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-01-13-aeraki-global-ratelimit/</guid><description>&lt;p>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理私有协议的七层流量。&lt;/p></description></item><item><title>Aeraki 教程系列：如何设置本地限流规则？</title><link>https://lopins.github.io/hugo-template/post/2022-01-12-aeraki-local-ratelimit/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-01-12-aeraki-local-ratelimit/</guid><description>&lt;p>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理私有协议的七层流量。&lt;/p></description></item><item><title>Aeraki 教程系列：如何设置路由规则？</title><link>https://lopins.github.io/hugo-template/post/2022-01-11-aeraki-routing/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2022-01-11-aeraki-routing/</guid><description>&lt;p>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理私有协议的七层流量。&lt;/p></description></item><item><title>译文：服务网格将使用 eBPF ？是的，但 Envoy 代理将继续存在</title><link>https://lopins.github.io/hugo-template/post/2021-12-19-ebpf-for-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-12-19-ebpf-for-service-mesh/</guid><description>&lt;p>译者按：这篇博客非常清晰地阐述了目前很热的 eBPF 和 Service Mesh 的关系，并分别介绍 Envoy 在几种不同的数据平面架构模型中的位置，以及这几种架构模型各自的优势和权衡。最近我和同事以及社区的同学就引入 eBPF 之后 Service Mesh 的架构演进做了一些讨论，结论和 Solo 的这篇博客中的某些观点类似。作为 Linux 内核的一种扩展能力，eBPF 并不会替换 Envoy 的七层代理能力，而是作为 Service Mesh 数据面的一个增强技术。&lt;/p></description></item><item><title>Aeraki Mesh</title><link>https://lopins.github.io/hugo-template/post/2021-09-27-aeraki/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-09-27-aeraki/</guid><description>&lt;p>Aeraki [Air-rah-ki] Mesh is an open-source service mesh I started about a year ago, and have been working on it till recently. Aeraki is the Greek word for ‘breeze’. While Istio connects microservices in a service mesh, Aeraki Mesh provides a non-intrusive, highly extendable way to allow Istio to support none-HTTP open-source and proprietary protocols. I hope this breeze can help Istio and service mesh sail a little further.&lt;/p></description></item><item><title>Istio 运维实战（电子书）</title><link>https://lopins.github.io/hugo-template/post/2021-10-08-istio-operation-bible/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-10-08-istio-operation-bible/</guid><description>&lt;h3 id="istio-运维实战">Istio 运维实战&lt;/h3>
&lt;p>通过将微服务中原本在 SDK 中实现的应用流量管理、可见性、通信安全等服务治理能力下放到一个专门的“服务网格”基础设施中，Istio 解开了微服务的服务治理需求和业务逻辑之间的代码、编译、部署时机等的耦合，让微服务真正做到了承诺的“按需选择开发语言”，“独立部署升级”等能力，提升了微服务开发和部署的敏捷性，释放了微服务模式的生产力。&lt;/p></description></item><item><title>Online Lesson: Distributed Tracing with Jaeger, Kubernetes, and Istio</title><link>https://lopins.github.io/hugo-template/post/2021-09-08-distributed-tracing-with-jaeger-kubernetes-and-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-09-08-distributed-tracing-with-jaeger-kubernetes-and-istio/</guid><description>&lt;p>&lt;a href="https://www.manning.com/bundles/distributed-tracing-ser?utm_source=zhaohuabing&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=liveproject_zhao_distributed_9_7_21&amp;amp;a_aid=zhaohuabing&amp;amp;a_bid=ce8ffc93">&lt;strong>30% off&lt;/strong> 👉👉👉 Get this lesson now with my special discount!&lt;/a>
&lt;a href="https://www.manning.com/?utm_source=zhaohuabing&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=affiliate&amp;amp;a_aid=zhaohuabing">&lt;strong>30% off&lt;/strong> 👉👉👉 Get more Manning books with my special discount!&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.manning.com/bundles/distributed-tracing-ser?utm_source=zhaohuabing&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=liveproject_zhao_distributed_9_7_21&amp;amp;a_aid=zhaohuabing&amp;amp;a_bid=ce8ffc93">&lt;strong>优惠30%&lt;/strong> 👉👉👉 采用我的专属折扣链接购买本在线课程！&lt;/a>
&lt;a href="https://www.manning.com/?utm_source=zhaohuabing&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=affiliate&amp;amp;a_aid=zhaohuabing">&lt;strong>优惠30%&lt;/strong> 👉👉👉 采用我的专属折扣链接购买 Manning 书籍！&lt;/a>&lt;/p>
&lt;p>
 &lt;img src="https://zhaohuabing.com/static/img/2021-09-08-distributed-tracing-with-jaeger-kubernetes,-and-istio/manning-bundles-distributed-tracing.png" alt="">

&lt;/p></description></item><item><title>深入理解 Istio —— 云原生服务网格进阶实战</title><link>https://lopins.github.io/hugo-template/post/2021-08-26-istio-handbook/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-08-26-istio-handbook/</guid><description>&lt;h3 id="深入理解-istio--云原生服务网格进阶实战">深入理解 Istio —— 云原生服务网格进阶实战&lt;/h3>
&lt;p>&lt;a href="https://istio.io/zh">Istio&lt;/a> 是由 Google、IBM、Lyft 等共同开源的 Service Mesh（服务网格）框架，于2017年初开始进入大众视野，作为云原生时代下承 Kubernetes、上接 Serverless 架构的重要基础设施层，地位至关重要。&lt;a href="https://www.servicemesher.com/">ServiceMesher 社区&lt;/a>作为中国最早的一批在研究和推广 Service Mesh 技术的开源社区决定整合社区资源，合作撰写一本开源电子书作为服务网格智库。我作为编委会成员和主要作者之一，参与了本书的编写工作。&lt;/p></description></item><item><title>Istio Meetup China：全栈服务网格 - Aeraki 助你在 Istio 服务网格中管理任何七层流量</title><link>https://lopins.github.io/hugo-template/post/2021-07-10-full-stack-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-07-10-full-stack-service-mesh/</guid><description>&lt;h2 id="主题简介">主题简介&lt;/h2>
&lt;p>流量管理是 Istio 服务网格的核心能力，然而 Istio 缺省只提供了 HTTP 和 gRPC 两种协议的七层管理能力。对于微服务中常用的其他协议，包括 RPC、Messaging、Cache、Database等，Istio 只支持在四层上对这些协议进行处理。这导致我们将微服务应用迁移到 Istio 服务网格时，无法充分利用服务网格提供的流量管理能力。开源项目 Aeraki 提供了一个第三方协议的扩展框架，支持在 Istio 中对任意七层流量进行管理，提供动态路由、负载均衡、熔断等流量管理能力。本次分享将介绍如何使用 Aeraki 在 Istio 服务网格中管理任何七层协议，包括 Thrift，Dubbo，Redis，以及私有 RPC 协议等，并演示一个使用 Aeraki 管理第三方 RPC 协议的示例。&lt;/p></description></item><item><title>IstioCon 2021: How to Manage Any Layer-7 Traffic in an Istio Service Mesh?</title><link>https://lopins.github.io/hugo-template/post/2021-03-02-manage-any-layer-7-traffic-in-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2021-03-02-manage-any-layer-7-traffic-in-istio/</guid><description>&lt;p>备注：本文根据腾讯云赵化冰和知乎唐阳在 IstioCon 2021 中的演讲 &lt;a href="https://events.istio.io/istiocon-2021/sessions/how-to-manage-any-layer-7-traffic-in-an-istio-service-mesh/">“How to Manage Any Layer-7 Traffic in an Istio Service Mesh?”&lt;/a> 整理而成。&lt;/p>
&lt;p>大家好，今天我们想和大家分享的主题是如何扩展 Istio 以支持任何七层协议？作为云原生领域中一个人气非常高的开源项目， Istio 目前已经基本成为了 Service Mesh 的事实标准。腾讯云上也提供了基于 Istio 进行增强，和 Istio API 完全兼容的 Service Mesh 管理服务 TCM（Tencent Cloud Mesh），以帮助我们的用户以较小的迁移成本和维护代价快速利用到 Service Mesh 提供的流量管理和服务治理能力。今天非常高兴能够有这个机会来和大家一起分享一下我们在此过程中的一些经验。&lt;/p></description></item><item><title>CNBPS 2020：Istio 流量管理原理与协议扩展</title><link>https://lopins.github.io/hugo-template/post/2020-12-07-cnbps2020-istio-traffic-management/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-12-07-cnbps2020-istio-traffic-management/</guid><description>&lt;p>通过本次的分享，听众可以理解Istio流量管理背后的实现原理，包括控制面流量管理模型和数据面流量转发机制。本次分享还将介绍如何对Istio进行扩展，以支持更多地七层协议，如dubbo，thrift，redis等等。&lt;/p></description></item><item><title>CNBPS 2020：云原生应用架构专场介绍</title><link>https://lopins.github.io/hugo-template/post/2020-11-12-cnbps2020/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-11-12-cnbps2020/</guid><description>&lt;p>11月19-21日，CNBPS 2020重磅回归！&lt;/p>
&lt;p>作为一年一度的云原生科技盛会，众多云原生届的“顶流”将在这里聚集，展现云原生世界的科技想象力。&lt;/p>
&lt;p>了解云原生趋势和最佳实践？来这一场就够了！&lt;/p></description></item><item><title>在 Istio 中实现 Redis 集群的数据分片、读写分离和流量镜像</title><link>https://lopins.github.io/hugo-template/post/2020-10-14-redis-cluster-with-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-10-14-redis-cluster-with-istio/</guid><description>&lt;p>Redis 是一个高性能的 key-value 存储系统，被广泛用于微服务架构中。如果我们想要使用 Redis 集群模式提供的高级特性，则需要对客户端代码进行改动，这带来了应用升级和维护的一些困难。利用 Istio 和 Envoy ，我们可以在不修改客户端代码的前提下实现客户端无感知的 Redis Cluster 数据分片，并提供读写分离、流量镜像等高级流量管理功能。&lt;/p></description></item><item><title>Istio 运维实战系列（3）：让人头大的『无头服务』-下</title><link>https://lopins.github.io/hugo-template/post/2020-09-19-headless-mtls/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-09-19-headless-mtls/</guid><description>&lt;p>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方法。&lt;/p></description></item><item><title>Istio 运维实战系列（2）：让人头大的『无头服务』-上</title><link>https://lopins.github.io/hugo-template/post/2020-09-11-headless-mtls/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-09-11-headless-mtls/</guid><description>&lt;p>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方法。&lt;/p></description></item><item><title>Istio 运维实战系列（1）：应用容器对 Envoy Sidecar 的启动依赖问题</title><link>https://lopins.github.io/hugo-template/post/2020-09-05-istio-sidecar-dependency/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-09-05-istio-sidecar-dependency/</guid><description>&lt;p>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方法。&lt;/p></description></item><item><title>Google Cloud 服务网格：Traffic Director 与 Anthos Service Mesh 的左右互搏</title><link>https://lopins.github.io/hugo-template/post/2020-08-13-gcloud-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-08-13-gcloud-service-mesh/</guid><description>&lt;p>作为开源 Service Mesh 明星项目 Istio 背后的主要厂商，Google 也在其公有云上推出了 Service Mesh 管理服务。让人迷惑的是 Google Cloud 上有两个 Service Mesh 产品：Traffic Director 与 Anthos Service Mesh。Google Cloud 首先在2019年3月发布了其第一个 Service Mesh 产品 Traffic Director，随后不久在2019 年9月紧接着发布了另一个 Service Mesh 产品 Anthos Service Mesh，随后两个产品独立并行发展，直到如今。&lt;/p></description></item><item><title>How to Integrate Your Service Registry with Istio?</title><link>https://lopins.github.io/hugo-template/post/2020-06-12-third-party-registry-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-06-12-third-party-registry-english/</guid><description>&lt;p>Microservice is a powerful software architecture to escalate innovations, and many businesses have been adopting microservice for a long time. However, the transition from monolith to microservice comes with costs. Fundamentally, microservices are distributed systems, often in large scales, which bring the burden of networking such as service discovery, retry, circuit breaker, as well as the observability such as metrics, logging, and distributed tracing.&lt;/p>
&lt;p>Istio helps microservices to offloads these common concerns to a dedicated infrastructure layer, so the microservices themselves can shift the burden of microservices to Istio, and focus on their own business logic. With all the promising benefits, more and more microservices projects begin to consider migrating their own microservices infrastructure to Istio.&lt;/p></description></item><item><title>如何将第三方服务中心注册集成到 Istio ？</title><link>https://lopins.github.io/hugo-template/post/2020-06-02-third-party-registry/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-06-02-third-party-registry/</guid><description>&lt;p>作为云原生服务网格领域的热门开源项目，Istio 可以为微服务提供无侵入的流量管理、安全通信、服务可见性等服务治理能力。目前越来越多的微服务项目开始考虑将自己的微服务基础设施向 Istio 进行迁移。&lt;/p></description></item><item><title>一文带你彻底厘清 Isito 中的证书工作机制</title><link>https://lopins.github.io/hugo-template/post/2020-05-25-istio-certificate/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-05-25-istio-certificate/</guid><description>&lt;p>在上一篇文章&lt;a href="https://zhaohuabing.com/post/2020-05-19-k8s-certificate/">一文带你彻底厘清 Kubernetes 中的证书工作机制&lt;/a>中，我们介绍了 Kubernetes 中证书的工作机制。在这篇文章中，我们继续探讨 Istio 是如何使用证书来实现网格中服务的身份认证和安全通信的。&lt;/p></description></item><item><title>Network Service Mesh: A Big Step Toward Cloud-Native NFV</title><link>https://lopins.github.io/hugo-template/post/2020-02-21-network-service-mesh-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-02-21-network-service-mesh-english/</guid><description>&lt;p>When hearing about the term “Network Service Mesh” for the first time, you probably are as curious as I was: What exactly is it behind this fancy name? Does it have anything to do with Service Mesh/Istio? It turns out that Network Service Mesh is a sandbox project in the CNCF (Cloud Native Foundation), and it’s also a new hotspot in the cloud-native area. In this post, I’ll dive into the architecture and technical details of Network Service Mesh, and also explore the relationship between it and some other similar technologies you might get confused with, including Service Mesh, SDN, and NFV.&lt;/p></description></item><item><title>NFV迈向云原生时代：Network Service Mesh项目介绍</title><link>https://lopins.github.io/hugo-template/post/2020-02-15-network-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2020-02-15-network-service-mesh/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>当第一次看到Network Service Mesh这一名词时，你很可能和我一样好奇它到底是什么？是否和Service Mesh有什么关系？Network Service Mesh是云原生领域中一个新的热点，是CNCF（云原生基金会）中的一个沙箱项目。本文将介绍Network Service Mesh的起源和架构，并探讨其与Service Mesh、SDN、NFV等相关技术的区别与联系。&lt;/p></description></item><item><title>Istio流量管理实现机制深度解析</title><link>https://lopins.github.io/hugo-template/post/2018-09-25-istio-traffic-management-impl-intro/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-09-25-istio-traffic-management-impl-intro/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Istio作为一个service mesh开源项目,其中最重要的功能就是对网格中微服务之间的流量进行管理,包括服务发现,请求路由和服务间的可靠通信。Istio实现了service mesh的控制面，并整合Envoy开源项目作为数据面的sidecar，一起对流量进行控制。&lt;/p></description></item><item><title>What Can Service Mesh Learn from SDN?</title><link>https://lopins.github.io/hugo-template/post/2019-11-23-what-can-service-mesh-learn-from-sdn-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-11-23-what-can-service-mesh-learn-from-sdn-english/</guid><description>&lt;p>Service Mesh is yet another emerging fancy tech word in the field of microservices recently. If you have a telecommunication or networking background, you may have already noticed that Service Mesh and SDN (Software Defined Network) look similar. Both of them use a software layer to manage and control the network infrastructure, and they also share the same architecture, which consists of a control plane and a data plane.&lt;/p>
&lt;p>So what is the relationship between Service Mesh and SDN — Is Service Mesh the next generation of SDN? What can Service Mesh learn from the experience of SDN? I’d like to share some of my own opinions in this article.&lt;/p></description></item><item><title>如何降低Istio服务网格中Envoy的内存开销</title><link>https://lopins.github.io/hugo-template/post/2019-11-15-envoy-memory-optimize/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-11-15-envoy-memory-optimize/</guid><description>&lt;h2 id="envoy的内存占用">Envoy的内存占用&lt;/h2>
&lt;p>在Istio服务网格中，每个Envoy占用的内存也许并不算多，但所有sidecar增加的内存累积起来则是一个不小的数字。在进行商用部署时，我们需要考虑如何优化并减少服务网格带来的额外内存消耗。&lt;/p></description></item><item><title>Service Mesher Meetup 成都站：Service Mesh是下一代SDN吗？</title><link>https://lopins.github.io/hugo-template/post/2019-10-26-what-can-service-mesh-learn-from-sdn/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-10-26-what-can-service-mesh-learn-from-sdn/</guid><description>&lt;p>如果具有通信或者网络行业的知识背景，那么你对SDN(Software Defined Network)一定不会陌生。你也许已经注意到，近来在微服务领域兴起的Service Mesh和SDN(Software Defined Network) 非常相似，这两者都采用了软件对网络进行管理和控制，也都采用了包含控制面和数据面的类似架构。&lt;/p></description></item><item><title>Istio Pilot代码深度解析</title><link>https://lopins.github.io/hugo-template/post/2019-10-21-pilot-discovery-code-analysis/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-10-21-pilot-discovery-code-analysis/</guid><description>&lt;h1 id="istio-pilot-组件介绍">Istio Pilot 组件介绍&lt;/h1>
&lt;p>在Istio架构中，Pilot组件属于最核心的组件，负责了服务网格中的流量管理以及控制面和数据面之间的配置下发。Pilot内部的代码结构比较复杂，本文中我们将通过对Pilot的代码的深入分析来了解Pilot实现原理。&lt;/p></description></item><item><title>Enhance Istio Distributed Tracing with OpenTracing</title><link>https://lopins.github.io/hugo-template/post/2019-07-02-using-opentracing-with-istio-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-07-02-using-opentracing-with-istio-english/</guid><description>&lt;p>In the previous post, we discussed how to use Opentracing to help Istio Service Mesh to propagate tracing context across process boundaries, and how to enrich Istio/Envoy generated traces with method-level spans to get more fine-grained insights to the services.&lt;/p>
&lt;p>For now, all that we have been talking is just about synchronous RPC (HTTP/REST), however, we can’t ignore the fact that asynchronous messaging is also widely adopted as an inter-services communication mechanism. So in this post, we will continue to use the eshop demo to explore how asynchronous messaging, specifically Kafka, can be traced in Istio service mesh with the help of Opentracing.&lt;/p></description></item><item><title>Enhance Istio Distributed Tracing with OpenTracing</title><link>https://lopins.github.io/hugo-template/post/2019-06-22-using-opentracing-with-istio-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-06-22-using-opentracing-with-istio-english/</guid><description>&lt;p>While evolving towards a microservices architecture, the biggest change is that the monolith application has been divided into multiple independent processes(or services), as a result, a method call between software modules now becomes a remote procedure call go through multiple services.&lt;/p>
&lt;p>A client request usually goes through a couple of or even a dozen of services in a complex microservices system, which makes it really hard to figure out what’s going on when a request fails or becomes slow.&lt;/p></description></item><item><title>洞若观火：使用OpenTracing增强Istio的调用链跟踪</title><link>https://lopins.github.io/hugo-template/post/2019-07-02-using-opentracing-with-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-07-02-using-opentracing-with-istio/</guid><description>&lt;p>在上一篇文章中，我们通过一个网上商店的示例程序学习了如何使用Opentracing在Istio服务网格中传递分布式调用跟踪的上下文，以及如何将方法级的调用信息加入到Istio/Envoy生成的调用链中。采用Opentracing可以减少应用代码中传递HTTP header的重复代码；也可以根据需要在调用链中加入更细粒度的Span，以用于对系统性能瓶颈进行在线分析。&lt;/p></description></item><item><title>洞若观火：使用OpenTracing增强Istio的调用链跟踪</title><link>https://lopins.github.io/hugo-template/post/2019-06-22-using-opentracing-with-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-06-22-using-opentracing-with-istio/</guid><description>&lt;h1 id="分布式调用跟踪和opentracing规范">分布式调用跟踪和Opentracing规范&lt;/h1>
&lt;h2 id="什么是分布式调用跟踪">什么是分布式调用跟踪？&lt;/h2>
&lt;p>相比传统的“巨石”应用，微服务的一个主要变化是将应用中的不同模块拆分为了独立的进程。在微服务架构下，原来进程内的方法调用成为了跨进程的RPC调用。相对于单一进程的方法调用，跨进程调用的调试和故障分析是非常困难的，很难用传统的调试器或者日志打印来对分布式调用进行查看和分析。

 &lt;img src="https://zhaohuabing.com/static/img/2019-06-22-using-opentracing-with-istio/monolith-microserivce.jpg" alt="">


如上图所示，一个来自客户端的请求经过了多个微服务进程。如果要对该请求进行分析，则必须将该请求经过的所有服务的相关信息都收集起来并关联在一起，这就是“分布式调用跟踪”。&lt;/p></description></item><item><title>Which One is the Right Choice for the Ingress Gateway of Your Service Mesh?</title><link>https://lopins.github.io/hugo-template/post/2019-04-16-how-to-choose-ingress-for-service-mesh-english/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-04-16-how-to-choose-ingress-for-service-mesh-english/</guid><description>&lt;p>By default, in a Kubernetes cluster with the Istio service mesh enabled, services can only be accessed inside the cluster. However, some of the services may need to be exposed to external networks as well. Kubernetes and Istio provide a variety of means to get external traffic into your cluster including NodePort, LoadBalancer, Kubernetes Ingress and Istio Gateway. With all these options, which one should be the right choice for your service mesh running in production?&lt;/p></description></item><item><title>如何为服务网格选择入口网关？</title><link>https://lopins.github.io/hugo-template/post/2019-03-29-how-to-choose-ingress-for-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-03-29-how-to-choose-ingress-for-service-mesh/</guid><description>&lt;p>在启用了Istio服务网格的Kubernetes集群中，缺省情况下只能在集群内部访问网格中的服务，要如何才能从外部网络访问这些服务呢？ Kubernetes和Istio提供了NodePort，LoadBalancer，Kubernetes Ingress，Istio Gateway等多种外部流量入口的方式，面对这么多种方式，我们在产品部署中应该如何选择？&lt;/p></description></item><item><title>Istio 服务注册插件机制代码解析</title><link>https://lopins.github.io/hugo-template/post/2019-02-18-pilot-service-registry-code-analysis/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2019-02-18-pilot-service-registry-code-analysis/</guid><description>&lt;h1 id="istio服务注册插件机制">Istio服务注册插件机制&lt;/h1>
&lt;p>在Istio架构中，Pilot组件负责维护网格中的标准服务模型，该标准服务模型独立于各种底层平台，Pilot通过适配器和各底层平台对接，以使用底层平台中的服务数据填充此标准模型。&lt;/p></description></item><item><title>The obstacles to put Istio into production and how we solve them</title><link>https://lopins.github.io/hugo-template/post/2018-12-27-the-obstacles-to-put-istio-into-production/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-12-27-the-obstacles-to-put-istio-into-production/</guid><description>&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->What is service mesh?&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->
Service mesh is becoming yet another fancy name in the cloud-native world this year. What exactly it is? By definition, service mesh is a dedicated infrastructure layer for handling service-to-service communication. It’s responsible for the reliable delivery of requests through the complex topology of services that comprise a modern, cloud-native application. Besides, it also facilitates the governance of services.
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->What is Istio?&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->
Istio is an open-source service mesh project lead by Google, IBM and Lyft. As an open platform, Istio lets you connect, secure, control, and observe services.&lt;/p></description></item><item><title>拥抱NFV，Istio 1.1 将支持多网络平面</title><link>https://lopins.github.io/hugo-template/post/2018-12-19-multi-network-interfaces-for-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-12-19-multi-network-interfaces-for-istio/</guid><description>&lt;p>Istio 1.0版本只支持在单个网络，即Mesh中的服务只能连接在一个网络上。虽然在架构设计上是开放的，但从目前的代码来看，Istio的内部实现还是和Kubernetes高度集成的。由于Kubernetes集群中Pod缺省只支持一个网络接口，因此Istio也存在该限制并不让人意外。&lt;/p></description></item><item><title>Istio实战系列-Envoy Proxy构建分析</title><link>https://lopins.github.io/hugo-template/post/2018-10-29-envoy-build/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-10-29-envoy-build/</guid><description>&lt;p>Istio由控制面和数据面组成。其中Envoy是Istio在数据面缺省使用的转发代理，Istio利用Envoy的四层和七层代理功能对网格中微服务之间的调用流量进行转发。今天我们来分析一下Istio 使用到的Envoy构建流程。&lt;/p></description></item><item><title>Istio微服务平台集成实践</title><link>https://lopins.github.io/hugo-template/post/2018-10-18-istio-paas-integration/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-10-18-istio-paas-integration/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Istio发布1.0版本后，其服务发现和路由规则功能已基本具备production能力，我们也开始了Istio和公司内部微服务平台的集成工作，打算以Istio为基础打造一个微服务管控中心，在这里把目前的进展和遇到的坑和大家分享一下。&lt;/p></description></item><item><title>Istio流量管理实现机制深度解析</title><link>https://lopins.github.io/hugo-template/post/2018-09-25-istio-traffic-management-impl-intro/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-09-25-istio-traffic-management-impl-intro/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Istio作为一个service mesh开源项目,其中最重要的功能就是对网格中微服务之间的流量进行管理,包括服务发现,请求路由和服务间的可靠通信。Istio实现了service mesh的控制面，并整合Envoy开源项目作为数据面的sidecar，一起对流量进行控制。&lt;/p></description></item><item><title>Secure ONAP Microservices with Istio Mutual TLS Authentication and RBAC</title><link>https://lopins.github.io/hugo-template/post/2018-08-15-manage-onap-with-istio-auth-enabled/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-08-15-manage-onap-with-istio-auth-enabled/</guid><description>&lt;p>In the previous post &lt;a href="https://zhaohuabing.com/post/2018-08-01-manage-onap-with-istio/">Manage ONAP Microservices with Istio Service Mesh&lt;/a>, we went through the steps of how to install Istio and integrate it with ONAP platform, it’s super simple and has nearly no impact to the existing projects. Now let’s enable Istio auth to secure the inter-service communication inside ONAP, it will need a little bit more efforts, but it’s worth with the benefits brought by it.&lt;/p></description></item><item><title>Manage ONAP Microservices with Istio Service Mesh</title><link>https://lopins.github.io/hugo-template/post/2018-08-01-manage-onap-with-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-08-01-manage-onap-with-istio/</guid><description>&lt;p>In the previous post &lt;a href="https://zhaohuabing.com/post/2018-06-22-onap-with-service-mesh/">How service mesh can help during the ONAP Microservice journey&lt;/a>, we have discussed why the community wants ONAP to evolve towards Microservice architecture and how service mesh approach could help during the journey. Now it’s time to dip our toe in the water, let’s try out Istio with ONAP by following the below steps.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h1 id="installation">Installation&lt;/h1>
&lt;p>First, download installation scripts from ONAP Gerrit:&lt;/p></description></item><item><title>How service mesh can help during the ONAP Microservice journey</title><link>https://lopins.github.io/hugo-template/post/2018-06-22-onap-with-service-mesh/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/post/2018-06-22-onap-with-service-mesh/</guid><description>&lt;p>&lt;a href="https://www.onap.org/announcement/2018/06/12/onap-announces-availability-of-beijing-release-enabling-a-deployment-ready-platform-for-network-automation-and-orchestration">ONAP Beijing is available now&lt;/a>!&lt;/p>
&lt;p>ONAP, as part of LF Networking, now accounts for more than 65% of global subscriber participation through carriers creating a harmonized, de-facto open source platform.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>While it&amp;rsquo;s so exciting to see that more operators are deploying ONAP in their commercial network, ONAP community realizes that there are still somewhere we can improve to smooth the deployment process. For example, instead of deploying ONAP as a whole, users may just want to pick some modules, integrate these modules with their existing system to get a customized ONAP solution. Actually, this is a very usual usage scenario in open source world. So it should be easy to tailor ONAP to suit the different scenarios and purposes for various users.&lt;/p></description></item><item><title>Istio v1aplha3 routing API介绍(译文）</title><link>https://lopins.github.io/hugo-template/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid><description>&lt;p>到目前为止，Istio提供了一个简单的API来进行流量管理，该API包括了四种资源：RouteRule，DestinationPolicy，EgressRule和Ingress（直接使用了Kubernets的Ingress资源）。借助此API，用户可以轻松管理Istio服务网格中的流量。该API允许用户将请求路由到特定版本的服务，为弹性测试注入延迟和失败，添加超时和断路器等等，所有这些功能都不必更改应用程序本身的代码。&lt;/p></description></item><item><title>Istio 0.8 Release发布</title><link>https://lopins.github.io/hugo-template/2018/06/02/istio08/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2018/06/02/istio08/</guid><description>&lt;blockquote>
&lt;p>在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：&lt;/p>
&lt;/blockquote></description></item><item><title>Istio Sidecar自动注入原理</title><link>https://lopins.github.io/hugo-template/2018/05/23/istio-auto-injection-with-webhook/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2018/05/23/istio-auto-injection-with-webhook/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;hr>
&lt;p>Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。&lt;/p>
&lt;p>使用webhook的优势是不需要对API Server的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的web进程，通过参数方式传入到kubernets中，由kubernets在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p>
&lt;p>Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。&lt;/p></description></item><item><title>谈谈微服务架构中的基础设施：Service Mesh与Istio</title><link>https://lopins.github.io/hugo-template/2018/03/29/what-is-service-mesh-and-istio/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2018/03/29/what-is-service-mesh-and-istio/</guid><description>&lt;h2 id="微服务架构的演进">微服务架构的演进&lt;/h2>
&lt;p>作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。&lt;/p>
&lt;p>另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性。&lt;/p></description></item><item><title>Nginx开源Service Mesh组件Nginmesh安装指南</title><link>https://lopins.github.io/hugo-template/2018/01/02/nginmesh-install/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2018/01/02/nginmesh-install/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。&lt;/p></description></item><item><title>采用Istio实现灰度发布(金丝雀发布)</title><link>https://lopins.github.io/hugo-template/2017/11/08/istio-canary-release/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2017/11/08/istio-canary-release/</guid><description>&lt;h2 id="灰度发布又名金丝雀发布介绍">灰度发布（又名金丝雀发布）介绍&lt;/h2>
&lt;p>当应用上线以后，运维面临的一大挑战是如何能够在不影响已上线业务的情况下进行升级。做过产品的同学都清楚，不管在发布前做过多么完备的自动化和人工测试，在发布后都会出现或多或少的故障。根据墨菲定律，可能会出错的版本发布一定会出错。&lt;/p></description></item><item><title>使用Istio实现应用流量转移</title><link>https://lopins.github.io/hugo-template/2017/11/07/istio-traffic-shifting/</link><pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2017/11/07/istio-traffic-shifting/</guid><description>&lt;p>关于Istio的更多内容请参考&lt;a href="http://istio.doczh.cn/">istio中文文档&lt;/a>。&lt;/p>
&lt;p>原文参见&lt;a href="https://istio.io/docs/tasks/traffic-management/traffic-shifting.html">Traffic Shifting&lt;/a>。&lt;/p>
&lt;p>本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。&lt;/p></description></item><item><title>Istio及Bookinfo示例程序安装试用笔记</title><link>https://lopins.github.io/hugo-template/2017/11/04/istio-install_and_example/</link><pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate><guid>https://lopins.github.io/hugo-template/2017/11/04/istio-install_and_example/</guid><description>&lt;h2 id="服务网格简介">服务网格简介&lt;/h2>
&lt;p>&lt;strong>服务网格&lt;/strong>（Service Mesh）是为解决微服务的通信和治理而出现的一种&lt;strong>架构模式&lt;/strong>。&lt;/p>
&lt;p>服务网格将服务间通讯以及与此相关的管理控制功能从业务程序中下移到一个基础设施层，从而彻底隔离了业务逻辑和服务通讯两个关注点。采用服务网格后，应用开发者只需要关注并实现应用业务逻辑。服务之间的通信，包括服务发现，通讯的可靠性，通讯的安全性，服务路由等由服务网格层进行处理，并对应用程序透明。&lt;/p></description></item></channel></rss>